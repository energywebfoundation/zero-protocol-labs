
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model File
 */

export type File = {
  id: string
  fileName: string
  mimeType: string
  createdAt: Date
  content: Buffer
  purchaseId: string | null
}

/**
 * Model Buyer
 */

export type Buyer = {
  id: string
  name: string | null
}

/**
 * Model Seller
 */

export type Seller = {
  id: string
  name: string
  addressLine1: string
  addressLine2: string
  contactPerson: string
}

/**
 * Model Certificate
 */

export type Certificate = {
  id: string
  generatorName: string
  generatorId: string
  country: string
  energySource: string
  generationStart: Date
  generationEnd: Date
}

/**
 * Model FilecoinNode
 */

export type FilecoinNode = {
  id: string
  buyerId: string | null
}

/**
 * Model Purchase
 */

export type Purchase = {
  id: string
  certificateId: string
  buyerId: string | null
  sellerId: string | null
  recsSold: number
  recsTransactions: Prisma.JsonValue
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Files
 * const files = await prisma.file.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Files
   * const files = await prisma.file.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.$executeRaw``, values will be escaped automatically
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.$executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.$queryRaw``, values will be escaped automatically
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.$queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.file`: Exposes CRUD operations for the **File** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Files
    * const files = await prisma.file.findMany()
    * ```
    */
  get file(): Prisma.FileDelegate<GlobalReject>;

  /**
   * `prisma.buyer`: Exposes CRUD operations for the **Buyer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Buyers
    * const buyers = await prisma.buyer.findMany()
    * ```
    */
  get buyer(): Prisma.BuyerDelegate<GlobalReject>;

  /**
   * `prisma.seller`: Exposes CRUD operations for the **Seller** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sellers
    * const sellers = await prisma.seller.findMany()
    * ```
    */
  get seller(): Prisma.SellerDelegate<GlobalReject>;

  /**
   * `prisma.certificate`: Exposes CRUD operations for the **Certificate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Certificates
    * const certificates = await prisma.certificate.findMany()
    * ```
    */
  get certificate(): Prisma.CertificateDelegate<GlobalReject>;

  /**
   * `prisma.filecoinNode`: Exposes CRUD operations for the **FilecoinNode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FilecoinNodes
    * const filecoinNodes = await prisma.filecoinNode.findMany()
    * ```
    */
  get filecoinNode(): Prisma.FilecoinNodeDelegate<GlobalReject>;

  /**
   * `prisma.purchase`: Exposes CRUD operations for the **Purchase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Purchases
    * const purchases = await prisma.purchase.findMany()
    * ```
    */
  get purchase(): Prisma.PurchaseDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.30.0
   * Query Engine version: b8c35d44de987a9691890b3ddf3e2e7effb9bf20
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    File: 'File',
    Buyer: 'Buyer',
    Seller: 'Seller',
    Certificate: 'Certificate',
    FilecoinNode: 'FilecoinNode',
    Purchase: 'Purchase'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model File
   */


  export type AggregateFile = {
    _count: FileCountAggregateOutputType | null
    count: FileCountAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
    max: FileMaxAggregateOutputType | null
  }

  export type FileMinAggregateOutputType = {
    id: string | null
    fileName: string | null
    mimeType: string | null
    createdAt: Date | null
    content: Buffer | null
    purchaseId: string | null
  }

  export type FileMaxAggregateOutputType = {
    id: string | null
    fileName: string | null
    mimeType: string | null
    createdAt: Date | null
    content: Buffer | null
    purchaseId: string | null
  }

  export type FileCountAggregateOutputType = {
    id: number
    fileName: number
    mimeType: number
    createdAt: number
    content: number
    purchaseId: number
    _all: number
  }


  export type FileMinAggregateInputType = {
    id?: true
    fileName?: true
    mimeType?: true
    createdAt?: true
    content?: true
    purchaseId?: true
  }

  export type FileMaxAggregateInputType = {
    id?: true
    fileName?: true
    mimeType?: true
    createdAt?: true
    content?: true
    purchaseId?: true
  }

  export type FileCountAggregateInputType = {
    id?: true
    fileName?: true
    mimeType?: true
    createdAt?: true
    content?: true
    purchaseId?: true
    _all?: true
  }

  export type FileAggregateArgs = {
    /**
     * Filter which File to aggregate.
     * 
    **/
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     * 
    **/
    orderBy?: Enumerable<FileOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Files
    **/
    _count?: true | FileCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | FileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: FileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: FileMaxAggregateInputType
  }

  export type GetFileAggregateType<T extends FileAggregateArgs> = {
        [P in keyof T & keyof AggregateFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFile[P]>
      : GetScalarType<T[P], AggregateFile[P]>
  }


    
    
  export type FileGroupByArgs = {
    where?: FileWhereInput
    orderBy?: Enumerable<FileOrderByInput>
    by: Array<FileScalarFieldEnum>
    having?: FileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileCountAggregateInputType | true
    _min?: FileMinAggregateInputType
    _max?: FileMaxAggregateInputType
  }


  export type FileGroupByOutputType = {
    id: string
    fileName: string
    mimeType: string
    createdAt: Date
    content: Buffer
    purchaseId: string | null
    _count: FileCountAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  type GetFileGroupByPayload<T extends FileGroupByArgs> = Promise<
    Array<
      PickArray<FileGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof FileGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], FileGroupByOutputType[P]> 
            : GetScalarType<T[P], FileGroupByOutputType[P]>
        }
      > 
    >


  export type FileSelect = {
    id?: boolean
    fileName?: boolean
    mimeType?: boolean
    createdAt?: boolean
    content?: boolean
    Purchase?: boolean | PurchaseArgs
    purchaseId?: boolean
  }

  export type FileInclude = {
    Purchase?: boolean | PurchaseArgs
  }

  export type FileGetPayload<
    S extends boolean | null | undefined | FileArgs,
    U = keyof S
      > = S extends true
        ? File
    : S extends undefined
    ? never
    : S extends FileArgs | FileFindManyArgs
    ?'include' extends U
    ? File  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Purchase'
        ? PurchaseGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof File ?File [P]
  : 
          P extends 'Purchase'
        ? PurchaseGetPayload<S['select'][P]> | null : never
  } 
    : File
  : File


  type FileCountArgs = Merge<
    Omit<FileFindManyArgs, 'select' | 'include'> & {
      select?: FileCountAggregateInputType | true
    }
  >

  export interface FileDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one File that matches the filter.
     * @param {FileFindUniqueArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'File'> extends True ? CheckSelect<T, Prisma__FileClient<File>, Prisma__FileClient<FileGetPayload<T>>> : CheckSelect<T, Prisma__FileClient<File | null >, Prisma__FileClient<FileGetPayload<T> | null >>

    /**
     * Find the first File that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'File'> extends True ? CheckSelect<T, Prisma__FileClient<File>, Prisma__FileClient<FileGetPayload<T>>> : CheckSelect<T, Prisma__FileClient<File | null >, Prisma__FileClient<FileGetPayload<T> | null >>

    /**
     * Find zero or more Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Files
     * const files = await prisma.file.findMany()
     * 
     * // Get first 10 Files
     * const files = await prisma.file.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileWithIdOnly = await prisma.file.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FileFindManyArgs>(
      args?: SelectSubset<T, FileFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<File>>, PrismaPromise<Array<FileGetPayload<T>>>>

    /**
     * Create a File.
     * @param {FileCreateArgs} args - Arguments to create a File.
     * @example
     * // Create one File
     * const File = await prisma.file.create({
     *   data: {
     *     // ... data to create a File
     *   }
     * })
     * 
    **/
    create<T extends FileCreateArgs>(
      args: SelectSubset<T, FileCreateArgs>
    ): CheckSelect<T, Prisma__FileClient<File>, Prisma__FileClient<FileGetPayload<T>>>

    /**
     * Create many Files.
     *     @param {FileCreateManyArgs} args - Arguments to create many Files.
     *     @example
     *     // Create many Files
     *     const file = await prisma.file.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FileCreateManyArgs>(
      args?: SelectSubset<T, FileCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a File.
     * @param {FileDeleteArgs} args - Arguments to delete one File.
     * @example
     * // Delete one File
     * const File = await prisma.file.delete({
     *   where: {
     *     // ... filter to delete one File
     *   }
     * })
     * 
    **/
    delete<T extends FileDeleteArgs>(
      args: SelectSubset<T, FileDeleteArgs>
    ): CheckSelect<T, Prisma__FileClient<File>, Prisma__FileClient<FileGetPayload<T>>>

    /**
     * Update one File.
     * @param {FileUpdateArgs} args - Arguments to update one File.
     * @example
     * // Update one File
     * const file = await prisma.file.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FileUpdateArgs>(
      args: SelectSubset<T, FileUpdateArgs>
    ): CheckSelect<T, Prisma__FileClient<File>, Prisma__FileClient<FileGetPayload<T>>>

    /**
     * Delete zero or more Files.
     * @param {FileDeleteManyArgs} args - Arguments to filter Files to delete.
     * @example
     * // Delete a few Files
     * const { count } = await prisma.file.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FileDeleteManyArgs>(
      args?: SelectSubset<T, FileDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FileUpdateManyArgs>(
      args: SelectSubset<T, FileUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one File.
     * @param {FileUpsertArgs} args - Arguments to update or create a File.
     * @example
     * // Update or create a File
     * const file = await prisma.file.upsert({
     *   create: {
     *     // ... data to create a File
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the File we want to update
     *   }
     * })
    **/
    upsert<T extends FileUpsertArgs>(
      args: SelectSubset<T, FileUpsertArgs>
    ): CheckSelect<T, Prisma__FileClient<File>, Prisma__FileClient<FileGetPayload<T>>>

    /**
     * Count the number of Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileCountArgs} args - Arguments to filter Files to count.
     * @example
     * // Count the number of Files
     * const count = await prisma.file.count({
     *   where: {
     *     // ... the filter for the Files we want to count
     *   }
     * })
    **/
    count<T extends FileCountArgs>(
      args?: Subset<T, FileCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileAggregateArgs>(args: Subset<T, FileAggregateArgs>): PrismaPromise<GetFileAggregateType<T>>

    /**
     * Group by File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileGroupByArgs['orderBy'] }
        : { orderBy?: FileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for File.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FileClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Purchase<T extends PurchaseArgs = {}>(args?: Subset<T, PurchaseArgs>): CheckSelect<T, Prisma__PurchaseClient<Purchase | null >, Prisma__PurchaseClient<PurchaseGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * File findUnique
   */
  export type FileFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the File
     * 
    **/
    select?: FileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FileInclude | null
    /**
     * Throw an Error if a File can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which File to fetch.
     * 
    **/
    where: FileWhereUniqueInput
  }


  /**
   * File findFirst
   */
  export type FileFindFirstArgs = {
    /**
     * Select specific fields to fetch from the File
     * 
    **/
    select?: FileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FileInclude | null
    /**
     * Throw an Error if a File can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which File to fetch.
     * 
    **/
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     * 
    **/
    orderBy?: Enumerable<FileOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     * 
    **/
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     * 
    **/
    distinct?: Enumerable<FileScalarFieldEnum>
  }


  /**
   * File findMany
   */
  export type FileFindManyArgs = {
    /**
     * Select specific fields to fetch from the File
     * 
    **/
    select?: FileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FileInclude | null
    /**
     * Filter, which Files to fetch.
     * 
    **/
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     * 
    **/
    orderBy?: Enumerable<FileOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Files.
     * 
    **/
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FileScalarFieldEnum>
  }


  /**
   * File create
   */
  export type FileCreateArgs = {
    /**
     * Select specific fields to fetch from the File
     * 
    **/
    select?: FileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FileInclude | null
    /**
     * The data needed to create a File.
     * 
    **/
    data: XOR<FileCreateInput, FileUncheckedCreateInput>
  }


  /**
   * File createMany
   */
  export type FileCreateManyArgs = {
    data: Enumerable<FileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * File update
   */
  export type FileUpdateArgs = {
    /**
     * Select specific fields to fetch from the File
     * 
    **/
    select?: FileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FileInclude | null
    /**
     * The data needed to update a File.
     * 
    **/
    data: XOR<FileUpdateInput, FileUncheckedUpdateInput>
    /**
     * Choose, which File to update.
     * 
    **/
    where: FileWhereUniqueInput
  }


  /**
   * File updateMany
   */
  export type FileUpdateManyArgs = {
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    where?: FileWhereInput
  }


  /**
   * File upsert
   */
  export type FileUpsertArgs = {
    /**
     * Select specific fields to fetch from the File
     * 
    **/
    select?: FileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FileInclude | null
    /**
     * The filter to search for the File to update in case it exists.
     * 
    **/
    where: FileWhereUniqueInput
    /**
     * In case the File found by the `where` argument doesn't exist, create a new File with this data.
     * 
    **/
    create: XOR<FileCreateInput, FileUncheckedCreateInput>
    /**
     * In case the File was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FileUpdateInput, FileUncheckedUpdateInput>
  }


  /**
   * File delete
   */
  export type FileDeleteArgs = {
    /**
     * Select specific fields to fetch from the File
     * 
    **/
    select?: FileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FileInclude | null
    /**
     * Filter which File to delete.
     * 
    **/
    where: FileWhereUniqueInput
  }


  /**
   * File deleteMany
   */
  export type FileDeleteManyArgs = {
    where?: FileWhereInput
  }


  /**
   * File without action
   */
  export type FileArgs = {
    /**
     * Select specific fields to fetch from the File
     * 
    **/
    select?: FileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FileInclude | null
  }



  /**
   * Model Buyer
   */


  export type AggregateBuyer = {
    _count: BuyerCountAggregateOutputType | null
    count: BuyerCountAggregateOutputType | null
    _min: BuyerMinAggregateOutputType | null
    min: BuyerMinAggregateOutputType | null
    _max: BuyerMaxAggregateOutputType | null
    max: BuyerMaxAggregateOutputType | null
  }

  export type BuyerMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type BuyerMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type BuyerCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type BuyerMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type BuyerMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type BuyerCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type BuyerAggregateArgs = {
    /**
     * Filter which Buyer to aggregate.
     * 
    **/
    where?: BuyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buyers to fetch.
     * 
    **/
    orderBy?: Enumerable<BuyerOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BuyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buyers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buyers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Buyers
    **/
    _count?: true | BuyerCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | BuyerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BuyerMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: BuyerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BuyerMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: BuyerMaxAggregateInputType
  }

  export type GetBuyerAggregateType<T extends BuyerAggregateArgs> = {
        [P in keyof T & keyof AggregateBuyer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuyer[P]>
      : GetScalarType<T[P], AggregateBuyer[P]>
  }


    
    
  export type BuyerGroupByArgs = {
    where?: BuyerWhereInput
    orderBy?: Enumerable<BuyerOrderByInput>
    by: Array<BuyerScalarFieldEnum>
    having?: BuyerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BuyerCountAggregateInputType | true
    _min?: BuyerMinAggregateInputType
    _max?: BuyerMaxAggregateInputType
  }


  export type BuyerGroupByOutputType = {
    id: string
    name: string | null
    _count: BuyerCountAggregateOutputType | null
    _min: BuyerMinAggregateOutputType | null
    _max: BuyerMaxAggregateOutputType | null
  }

  type GetBuyerGroupByPayload<T extends BuyerGroupByArgs> = Promise<
    Array<
      PickArray<BuyerGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof BuyerGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], BuyerGroupByOutputType[P]> 
            : GetScalarType<T[P], BuyerGroupByOutputType[P]>
        }
      > 
    >


  export type BuyerSelect = {
    id?: boolean
    name?: boolean
    Purchase?: boolean | PurchaseFindManyArgs
    filecoinNodes?: boolean | FilecoinNodeFindManyArgs
  }

  export type BuyerInclude = {
    Purchase?: boolean | PurchaseFindManyArgs
    filecoinNodes?: boolean | FilecoinNodeFindManyArgs
  }

  export type BuyerGetPayload<
    S extends boolean | null | undefined | BuyerArgs,
    U = keyof S
      > = S extends true
        ? Buyer
    : S extends undefined
    ? never
    : S extends BuyerArgs | BuyerFindManyArgs
    ?'include' extends U
    ? Buyer  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Purchase'
        ? Array < PurchaseGetPayload<S['include'][P]>>  :
        P extends 'filecoinNodes'
        ? Array < FilecoinNodeGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Buyer ?Buyer [P]
  : 
          P extends 'Purchase'
        ? Array < PurchaseGetPayload<S['select'][P]>>  :
        P extends 'filecoinNodes'
        ? Array < FilecoinNodeGetPayload<S['select'][P]>>  : never
  } 
    : Buyer
  : Buyer


  type BuyerCountArgs = Merge<
    Omit<BuyerFindManyArgs, 'select' | 'include'> & {
      select?: BuyerCountAggregateInputType | true
    }
  >

  export interface BuyerDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Buyer that matches the filter.
     * @param {BuyerFindUniqueArgs} args - Arguments to find a Buyer
     * @example
     * // Get one Buyer
     * const buyer = await prisma.buyer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BuyerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BuyerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Buyer'> extends True ? CheckSelect<T, Prisma__BuyerClient<Buyer>, Prisma__BuyerClient<BuyerGetPayload<T>>> : CheckSelect<T, Prisma__BuyerClient<Buyer | null >, Prisma__BuyerClient<BuyerGetPayload<T> | null >>

    /**
     * Find the first Buyer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerFindFirstArgs} args - Arguments to find a Buyer
     * @example
     * // Get one Buyer
     * const buyer = await prisma.buyer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BuyerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BuyerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Buyer'> extends True ? CheckSelect<T, Prisma__BuyerClient<Buyer>, Prisma__BuyerClient<BuyerGetPayload<T>>> : CheckSelect<T, Prisma__BuyerClient<Buyer | null >, Prisma__BuyerClient<BuyerGetPayload<T> | null >>

    /**
     * Find zero or more Buyers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Buyers
     * const buyers = await prisma.buyer.findMany()
     * 
     * // Get first 10 Buyers
     * const buyers = await prisma.buyer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const buyerWithIdOnly = await prisma.buyer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BuyerFindManyArgs>(
      args?: SelectSubset<T, BuyerFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Buyer>>, PrismaPromise<Array<BuyerGetPayload<T>>>>

    /**
     * Create a Buyer.
     * @param {BuyerCreateArgs} args - Arguments to create a Buyer.
     * @example
     * // Create one Buyer
     * const Buyer = await prisma.buyer.create({
     *   data: {
     *     // ... data to create a Buyer
     *   }
     * })
     * 
    **/
    create<T extends BuyerCreateArgs>(
      args: SelectSubset<T, BuyerCreateArgs>
    ): CheckSelect<T, Prisma__BuyerClient<Buyer>, Prisma__BuyerClient<BuyerGetPayload<T>>>

    /**
     * Create many Buyers.
     *     @param {BuyerCreateManyArgs} args - Arguments to create many Buyers.
     *     @example
     *     // Create many Buyers
     *     const buyer = await prisma.buyer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BuyerCreateManyArgs>(
      args?: SelectSubset<T, BuyerCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Buyer.
     * @param {BuyerDeleteArgs} args - Arguments to delete one Buyer.
     * @example
     * // Delete one Buyer
     * const Buyer = await prisma.buyer.delete({
     *   where: {
     *     // ... filter to delete one Buyer
     *   }
     * })
     * 
    **/
    delete<T extends BuyerDeleteArgs>(
      args: SelectSubset<T, BuyerDeleteArgs>
    ): CheckSelect<T, Prisma__BuyerClient<Buyer>, Prisma__BuyerClient<BuyerGetPayload<T>>>

    /**
     * Update one Buyer.
     * @param {BuyerUpdateArgs} args - Arguments to update one Buyer.
     * @example
     * // Update one Buyer
     * const buyer = await prisma.buyer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BuyerUpdateArgs>(
      args: SelectSubset<T, BuyerUpdateArgs>
    ): CheckSelect<T, Prisma__BuyerClient<Buyer>, Prisma__BuyerClient<BuyerGetPayload<T>>>

    /**
     * Delete zero or more Buyers.
     * @param {BuyerDeleteManyArgs} args - Arguments to filter Buyers to delete.
     * @example
     * // Delete a few Buyers
     * const { count } = await prisma.buyer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BuyerDeleteManyArgs>(
      args?: SelectSubset<T, BuyerDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Buyers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Buyers
     * const buyer = await prisma.buyer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BuyerUpdateManyArgs>(
      args: SelectSubset<T, BuyerUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Buyer.
     * @param {BuyerUpsertArgs} args - Arguments to update or create a Buyer.
     * @example
     * // Update or create a Buyer
     * const buyer = await prisma.buyer.upsert({
     *   create: {
     *     // ... data to create a Buyer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Buyer we want to update
     *   }
     * })
    **/
    upsert<T extends BuyerUpsertArgs>(
      args: SelectSubset<T, BuyerUpsertArgs>
    ): CheckSelect<T, Prisma__BuyerClient<Buyer>, Prisma__BuyerClient<BuyerGetPayload<T>>>

    /**
     * Count the number of Buyers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerCountArgs} args - Arguments to filter Buyers to count.
     * @example
     * // Count the number of Buyers
     * const count = await prisma.buyer.count({
     *   where: {
     *     // ... the filter for the Buyers we want to count
     *   }
     * })
    **/
    count<T extends BuyerCountArgs>(
      args?: Subset<T, BuyerCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BuyerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Buyer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BuyerAggregateArgs>(args: Subset<T, BuyerAggregateArgs>): PrismaPromise<GetBuyerAggregateType<T>>

    /**
     * Group by Buyer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BuyerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BuyerGroupByArgs['orderBy'] }
        : { orderBy?: BuyerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BuyerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuyerGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Buyer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BuyerClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Purchase<T extends PurchaseFindManyArgs = {}>(args?: Subset<T, PurchaseFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Purchase>>, PrismaPromise<Array<PurchaseGetPayload<T>>>>;

    filecoinNodes<T extends FilecoinNodeFindManyArgs = {}>(args?: Subset<T, FilecoinNodeFindManyArgs>): CheckSelect<T, PrismaPromise<Array<FilecoinNode>>, PrismaPromise<Array<FilecoinNodeGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Buyer findUnique
   */
  export type BuyerFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Buyer
     * 
    **/
    select?: BuyerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BuyerInclude | null
    /**
     * Throw an Error if a Buyer can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Buyer to fetch.
     * 
    **/
    where: BuyerWhereUniqueInput
  }


  /**
   * Buyer findFirst
   */
  export type BuyerFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Buyer
     * 
    **/
    select?: BuyerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BuyerInclude | null
    /**
     * Throw an Error if a Buyer can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Buyer to fetch.
     * 
    **/
    where?: BuyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buyers to fetch.
     * 
    **/
    orderBy?: Enumerable<BuyerOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Buyers.
     * 
    **/
    cursor?: BuyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buyers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buyers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Buyers.
     * 
    **/
    distinct?: Enumerable<BuyerScalarFieldEnum>
  }


  /**
   * Buyer findMany
   */
  export type BuyerFindManyArgs = {
    /**
     * Select specific fields to fetch from the Buyer
     * 
    **/
    select?: BuyerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BuyerInclude | null
    /**
     * Filter, which Buyers to fetch.
     * 
    **/
    where?: BuyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buyers to fetch.
     * 
    **/
    orderBy?: Enumerable<BuyerOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Buyers.
     * 
    **/
    cursor?: BuyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buyers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buyers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BuyerScalarFieldEnum>
  }


  /**
   * Buyer create
   */
  export type BuyerCreateArgs = {
    /**
     * Select specific fields to fetch from the Buyer
     * 
    **/
    select?: BuyerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BuyerInclude | null
    /**
     * The data needed to create a Buyer.
     * 
    **/
    data: XOR<BuyerCreateInput, BuyerUncheckedCreateInput>
  }


  /**
   * Buyer createMany
   */
  export type BuyerCreateManyArgs = {
    data: Enumerable<BuyerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Buyer update
   */
  export type BuyerUpdateArgs = {
    /**
     * Select specific fields to fetch from the Buyer
     * 
    **/
    select?: BuyerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BuyerInclude | null
    /**
     * The data needed to update a Buyer.
     * 
    **/
    data: XOR<BuyerUpdateInput, BuyerUncheckedUpdateInput>
    /**
     * Choose, which Buyer to update.
     * 
    **/
    where: BuyerWhereUniqueInput
  }


  /**
   * Buyer updateMany
   */
  export type BuyerUpdateManyArgs = {
    data: XOR<BuyerUpdateManyMutationInput, BuyerUncheckedUpdateManyInput>
    where?: BuyerWhereInput
  }


  /**
   * Buyer upsert
   */
  export type BuyerUpsertArgs = {
    /**
     * Select specific fields to fetch from the Buyer
     * 
    **/
    select?: BuyerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BuyerInclude | null
    /**
     * The filter to search for the Buyer to update in case it exists.
     * 
    **/
    where: BuyerWhereUniqueInput
    /**
     * In case the Buyer found by the `where` argument doesn't exist, create a new Buyer with this data.
     * 
    **/
    create: XOR<BuyerCreateInput, BuyerUncheckedCreateInput>
    /**
     * In case the Buyer was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BuyerUpdateInput, BuyerUncheckedUpdateInput>
  }


  /**
   * Buyer delete
   */
  export type BuyerDeleteArgs = {
    /**
     * Select specific fields to fetch from the Buyer
     * 
    **/
    select?: BuyerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BuyerInclude | null
    /**
     * Filter which Buyer to delete.
     * 
    **/
    where: BuyerWhereUniqueInput
  }


  /**
   * Buyer deleteMany
   */
  export type BuyerDeleteManyArgs = {
    where?: BuyerWhereInput
  }


  /**
   * Buyer without action
   */
  export type BuyerArgs = {
    /**
     * Select specific fields to fetch from the Buyer
     * 
    **/
    select?: BuyerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BuyerInclude | null
  }



  /**
   * Model Seller
   */


  export type AggregateSeller = {
    _count: SellerCountAggregateOutputType | null
    count: SellerCountAggregateOutputType | null
    _min: SellerMinAggregateOutputType | null
    min: SellerMinAggregateOutputType | null
    _max: SellerMaxAggregateOutputType | null
    max: SellerMaxAggregateOutputType | null
  }

  export type SellerMinAggregateOutputType = {
    id: string | null
    name: string | null
    addressLine1: string | null
    addressLine2: string | null
    contactPerson: string | null
  }

  export type SellerMaxAggregateOutputType = {
    id: string | null
    name: string | null
    addressLine1: string | null
    addressLine2: string | null
    contactPerson: string | null
  }

  export type SellerCountAggregateOutputType = {
    id: number
    name: number
    addressLine1: number
    addressLine2: number
    contactPerson: number
    _all: number
  }


  export type SellerMinAggregateInputType = {
    id?: true
    name?: true
    addressLine1?: true
    addressLine2?: true
    contactPerson?: true
  }

  export type SellerMaxAggregateInputType = {
    id?: true
    name?: true
    addressLine1?: true
    addressLine2?: true
    contactPerson?: true
  }

  export type SellerCountAggregateInputType = {
    id?: true
    name?: true
    addressLine1?: true
    addressLine2?: true
    contactPerson?: true
    _all?: true
  }

  export type SellerAggregateArgs = {
    /**
     * Filter which Seller to aggregate.
     * 
    **/
    where?: SellerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sellers to fetch.
     * 
    **/
    orderBy?: Enumerable<SellerOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SellerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sellers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sellers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sellers
    **/
    _count?: true | SellerCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | SellerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SellerMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: SellerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SellerMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: SellerMaxAggregateInputType
  }

  export type GetSellerAggregateType<T extends SellerAggregateArgs> = {
        [P in keyof T & keyof AggregateSeller]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeller[P]>
      : GetScalarType<T[P], AggregateSeller[P]>
  }


    
    
  export type SellerGroupByArgs = {
    where?: SellerWhereInput
    orderBy?: Enumerable<SellerOrderByInput>
    by: Array<SellerScalarFieldEnum>
    having?: SellerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SellerCountAggregateInputType | true
    _min?: SellerMinAggregateInputType
    _max?: SellerMaxAggregateInputType
  }


  export type SellerGroupByOutputType = {
    id: string
    name: string
    addressLine1: string
    addressLine2: string
    contactPerson: string
    _count: SellerCountAggregateOutputType | null
    _min: SellerMinAggregateOutputType | null
    _max: SellerMaxAggregateOutputType | null
  }

  type GetSellerGroupByPayload<T extends SellerGroupByArgs> = Promise<
    Array<
      PickArray<SellerGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof SellerGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], SellerGroupByOutputType[P]> 
            : GetScalarType<T[P], SellerGroupByOutputType[P]>
        }
      > 
    >


  export type SellerSelect = {
    id?: boolean
    name?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    contactPerson?: boolean
    Purchase?: boolean | PurchaseFindManyArgs
  }

  export type SellerInclude = {
    Purchase?: boolean | PurchaseFindManyArgs
  }

  export type SellerGetPayload<
    S extends boolean | null | undefined | SellerArgs,
    U = keyof S
      > = S extends true
        ? Seller
    : S extends undefined
    ? never
    : S extends SellerArgs | SellerFindManyArgs
    ?'include' extends U
    ? Seller  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Purchase'
        ? Array < PurchaseGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Seller ?Seller [P]
  : 
          P extends 'Purchase'
        ? Array < PurchaseGetPayload<S['select'][P]>>  : never
  } 
    : Seller
  : Seller


  type SellerCountArgs = Merge<
    Omit<SellerFindManyArgs, 'select' | 'include'> & {
      select?: SellerCountAggregateInputType | true
    }
  >

  export interface SellerDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Seller that matches the filter.
     * @param {SellerFindUniqueArgs} args - Arguments to find a Seller
     * @example
     * // Get one Seller
     * const seller = await prisma.seller.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SellerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SellerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Seller'> extends True ? CheckSelect<T, Prisma__SellerClient<Seller>, Prisma__SellerClient<SellerGetPayload<T>>> : CheckSelect<T, Prisma__SellerClient<Seller | null >, Prisma__SellerClient<SellerGetPayload<T> | null >>

    /**
     * Find the first Seller that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerFindFirstArgs} args - Arguments to find a Seller
     * @example
     * // Get one Seller
     * const seller = await prisma.seller.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SellerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SellerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Seller'> extends True ? CheckSelect<T, Prisma__SellerClient<Seller>, Prisma__SellerClient<SellerGetPayload<T>>> : CheckSelect<T, Prisma__SellerClient<Seller | null >, Prisma__SellerClient<SellerGetPayload<T> | null >>

    /**
     * Find zero or more Sellers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sellers
     * const sellers = await prisma.seller.findMany()
     * 
     * // Get first 10 Sellers
     * const sellers = await prisma.seller.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sellerWithIdOnly = await prisma.seller.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SellerFindManyArgs>(
      args?: SelectSubset<T, SellerFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Seller>>, PrismaPromise<Array<SellerGetPayload<T>>>>

    /**
     * Create a Seller.
     * @param {SellerCreateArgs} args - Arguments to create a Seller.
     * @example
     * // Create one Seller
     * const Seller = await prisma.seller.create({
     *   data: {
     *     // ... data to create a Seller
     *   }
     * })
     * 
    **/
    create<T extends SellerCreateArgs>(
      args: SelectSubset<T, SellerCreateArgs>
    ): CheckSelect<T, Prisma__SellerClient<Seller>, Prisma__SellerClient<SellerGetPayload<T>>>

    /**
     * Create many Sellers.
     *     @param {SellerCreateManyArgs} args - Arguments to create many Sellers.
     *     @example
     *     // Create many Sellers
     *     const seller = await prisma.seller.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SellerCreateManyArgs>(
      args?: SelectSubset<T, SellerCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Seller.
     * @param {SellerDeleteArgs} args - Arguments to delete one Seller.
     * @example
     * // Delete one Seller
     * const Seller = await prisma.seller.delete({
     *   where: {
     *     // ... filter to delete one Seller
     *   }
     * })
     * 
    **/
    delete<T extends SellerDeleteArgs>(
      args: SelectSubset<T, SellerDeleteArgs>
    ): CheckSelect<T, Prisma__SellerClient<Seller>, Prisma__SellerClient<SellerGetPayload<T>>>

    /**
     * Update one Seller.
     * @param {SellerUpdateArgs} args - Arguments to update one Seller.
     * @example
     * // Update one Seller
     * const seller = await prisma.seller.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SellerUpdateArgs>(
      args: SelectSubset<T, SellerUpdateArgs>
    ): CheckSelect<T, Prisma__SellerClient<Seller>, Prisma__SellerClient<SellerGetPayload<T>>>

    /**
     * Delete zero or more Sellers.
     * @param {SellerDeleteManyArgs} args - Arguments to filter Sellers to delete.
     * @example
     * // Delete a few Sellers
     * const { count } = await prisma.seller.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SellerDeleteManyArgs>(
      args?: SelectSubset<T, SellerDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sellers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sellers
     * const seller = await prisma.seller.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SellerUpdateManyArgs>(
      args: SelectSubset<T, SellerUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Seller.
     * @param {SellerUpsertArgs} args - Arguments to update or create a Seller.
     * @example
     * // Update or create a Seller
     * const seller = await prisma.seller.upsert({
     *   create: {
     *     // ... data to create a Seller
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Seller we want to update
     *   }
     * })
    **/
    upsert<T extends SellerUpsertArgs>(
      args: SelectSubset<T, SellerUpsertArgs>
    ): CheckSelect<T, Prisma__SellerClient<Seller>, Prisma__SellerClient<SellerGetPayload<T>>>

    /**
     * Count the number of Sellers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerCountArgs} args - Arguments to filter Sellers to count.
     * @example
     * // Count the number of Sellers
     * const count = await prisma.seller.count({
     *   where: {
     *     // ... the filter for the Sellers we want to count
     *   }
     * })
    **/
    count<T extends SellerCountArgs>(
      args?: Subset<T, SellerCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SellerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Seller.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SellerAggregateArgs>(args: Subset<T, SellerAggregateArgs>): PrismaPromise<GetSellerAggregateType<T>>

    /**
     * Group by Seller.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SellerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SellerGroupByArgs['orderBy'] }
        : { orderBy?: SellerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SellerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSellerGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Seller.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SellerClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Purchase<T extends PurchaseFindManyArgs = {}>(args?: Subset<T, PurchaseFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Purchase>>, PrismaPromise<Array<PurchaseGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Seller findUnique
   */
  export type SellerFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Seller
     * 
    **/
    select?: SellerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SellerInclude | null
    /**
     * Throw an Error if a Seller can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Seller to fetch.
     * 
    **/
    where: SellerWhereUniqueInput
  }


  /**
   * Seller findFirst
   */
  export type SellerFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Seller
     * 
    **/
    select?: SellerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SellerInclude | null
    /**
     * Throw an Error if a Seller can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Seller to fetch.
     * 
    **/
    where?: SellerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sellers to fetch.
     * 
    **/
    orderBy?: Enumerable<SellerOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sellers.
     * 
    **/
    cursor?: SellerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sellers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sellers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sellers.
     * 
    **/
    distinct?: Enumerable<SellerScalarFieldEnum>
  }


  /**
   * Seller findMany
   */
  export type SellerFindManyArgs = {
    /**
     * Select specific fields to fetch from the Seller
     * 
    **/
    select?: SellerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SellerInclude | null
    /**
     * Filter, which Sellers to fetch.
     * 
    **/
    where?: SellerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sellers to fetch.
     * 
    **/
    orderBy?: Enumerable<SellerOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sellers.
     * 
    **/
    cursor?: SellerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sellers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sellers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SellerScalarFieldEnum>
  }


  /**
   * Seller create
   */
  export type SellerCreateArgs = {
    /**
     * Select specific fields to fetch from the Seller
     * 
    **/
    select?: SellerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SellerInclude | null
    /**
     * The data needed to create a Seller.
     * 
    **/
    data: XOR<SellerCreateInput, SellerUncheckedCreateInput>
  }


  /**
   * Seller createMany
   */
  export type SellerCreateManyArgs = {
    data: Enumerable<SellerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Seller update
   */
  export type SellerUpdateArgs = {
    /**
     * Select specific fields to fetch from the Seller
     * 
    **/
    select?: SellerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SellerInclude | null
    /**
     * The data needed to update a Seller.
     * 
    **/
    data: XOR<SellerUpdateInput, SellerUncheckedUpdateInput>
    /**
     * Choose, which Seller to update.
     * 
    **/
    where: SellerWhereUniqueInput
  }


  /**
   * Seller updateMany
   */
  export type SellerUpdateManyArgs = {
    data: XOR<SellerUpdateManyMutationInput, SellerUncheckedUpdateManyInput>
    where?: SellerWhereInput
  }


  /**
   * Seller upsert
   */
  export type SellerUpsertArgs = {
    /**
     * Select specific fields to fetch from the Seller
     * 
    **/
    select?: SellerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SellerInclude | null
    /**
     * The filter to search for the Seller to update in case it exists.
     * 
    **/
    where: SellerWhereUniqueInput
    /**
     * In case the Seller found by the `where` argument doesn't exist, create a new Seller with this data.
     * 
    **/
    create: XOR<SellerCreateInput, SellerUncheckedCreateInput>
    /**
     * In case the Seller was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SellerUpdateInput, SellerUncheckedUpdateInput>
  }


  /**
   * Seller delete
   */
  export type SellerDeleteArgs = {
    /**
     * Select specific fields to fetch from the Seller
     * 
    **/
    select?: SellerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SellerInclude | null
    /**
     * Filter which Seller to delete.
     * 
    **/
    where: SellerWhereUniqueInput
  }


  /**
   * Seller deleteMany
   */
  export type SellerDeleteManyArgs = {
    where?: SellerWhereInput
  }


  /**
   * Seller without action
   */
  export type SellerArgs = {
    /**
     * Select specific fields to fetch from the Seller
     * 
    **/
    select?: SellerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SellerInclude | null
  }



  /**
   * Model Certificate
   */


  export type AggregateCertificate = {
    _count: CertificateCountAggregateOutputType | null
    count: CertificateCountAggregateOutputType | null
    _min: CertificateMinAggregateOutputType | null
    min: CertificateMinAggregateOutputType | null
    _max: CertificateMaxAggregateOutputType | null
    max: CertificateMaxAggregateOutputType | null
  }

  export type CertificateMinAggregateOutputType = {
    id: string | null
    generatorName: string | null
    generatorId: string | null
    country: string | null
    energySource: string | null
    generationStart: Date | null
    generationEnd: Date | null
  }

  export type CertificateMaxAggregateOutputType = {
    id: string | null
    generatorName: string | null
    generatorId: string | null
    country: string | null
    energySource: string | null
    generationStart: Date | null
    generationEnd: Date | null
  }

  export type CertificateCountAggregateOutputType = {
    id: number
    generatorName: number
    generatorId: number
    country: number
    energySource: number
    generationStart: number
    generationEnd: number
    _all: number
  }


  export type CertificateMinAggregateInputType = {
    id?: true
    generatorName?: true
    generatorId?: true
    country?: true
    energySource?: true
    generationStart?: true
    generationEnd?: true
  }

  export type CertificateMaxAggregateInputType = {
    id?: true
    generatorName?: true
    generatorId?: true
    country?: true
    energySource?: true
    generationStart?: true
    generationEnd?: true
  }

  export type CertificateCountAggregateInputType = {
    id?: true
    generatorName?: true
    generatorId?: true
    country?: true
    energySource?: true
    generationStart?: true
    generationEnd?: true
    _all?: true
  }

  export type CertificateAggregateArgs = {
    /**
     * Filter which Certificate to aggregate.
     * 
    **/
    where?: CertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     * 
    **/
    orderBy?: Enumerable<CertificateOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Certificates
    **/
    _count?: true | CertificateCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | CertificateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CertificateMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: CertificateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CertificateMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: CertificateMaxAggregateInputType
  }

  export type GetCertificateAggregateType<T extends CertificateAggregateArgs> = {
        [P in keyof T & keyof AggregateCertificate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCertificate[P]>
      : GetScalarType<T[P], AggregateCertificate[P]>
  }


    
    
  export type CertificateGroupByArgs = {
    where?: CertificateWhereInput
    orderBy?: Enumerable<CertificateOrderByInput>
    by: Array<CertificateScalarFieldEnum>
    having?: CertificateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CertificateCountAggregateInputType | true
    _min?: CertificateMinAggregateInputType
    _max?: CertificateMaxAggregateInputType
  }


  export type CertificateGroupByOutputType = {
    id: string
    generatorName: string
    generatorId: string
    country: string
    energySource: string
    generationStart: Date
    generationEnd: Date
    _count: CertificateCountAggregateOutputType | null
    _min: CertificateMinAggregateOutputType | null
    _max: CertificateMaxAggregateOutputType | null
  }

  type GetCertificateGroupByPayload<T extends CertificateGroupByArgs> = Promise<
    Array<
      PickArray<CertificateGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof CertificateGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], CertificateGroupByOutputType[P]> 
            : GetScalarType<T[P], CertificateGroupByOutputType[P]>
        }
      > 
    >


  export type CertificateSelect = {
    id?: boolean
    generatorName?: boolean
    generatorId?: boolean
    country?: boolean
    energySource?: boolean
    generationStart?: boolean
    generationEnd?: boolean
    Purchase?: boolean | PurchaseFindManyArgs
  }

  export type CertificateInclude = {
    Purchase?: boolean | PurchaseFindManyArgs
  }

  export type CertificateGetPayload<
    S extends boolean | null | undefined | CertificateArgs,
    U = keyof S
      > = S extends true
        ? Certificate
    : S extends undefined
    ? never
    : S extends CertificateArgs | CertificateFindManyArgs
    ?'include' extends U
    ? Certificate  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Purchase'
        ? Array < PurchaseGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Certificate ?Certificate [P]
  : 
          P extends 'Purchase'
        ? Array < PurchaseGetPayload<S['select'][P]>>  : never
  } 
    : Certificate
  : Certificate


  type CertificateCountArgs = Merge<
    Omit<CertificateFindManyArgs, 'select' | 'include'> & {
      select?: CertificateCountAggregateInputType | true
    }
  >

  export interface CertificateDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Certificate that matches the filter.
     * @param {CertificateFindUniqueArgs} args - Arguments to find a Certificate
     * @example
     * // Get one Certificate
     * const certificate = await prisma.certificate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CertificateFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CertificateFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Certificate'> extends True ? CheckSelect<T, Prisma__CertificateClient<Certificate>, Prisma__CertificateClient<CertificateGetPayload<T>>> : CheckSelect<T, Prisma__CertificateClient<Certificate | null >, Prisma__CertificateClient<CertificateGetPayload<T> | null >>

    /**
     * Find the first Certificate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateFindFirstArgs} args - Arguments to find a Certificate
     * @example
     * // Get one Certificate
     * const certificate = await prisma.certificate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CertificateFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CertificateFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Certificate'> extends True ? CheckSelect<T, Prisma__CertificateClient<Certificate>, Prisma__CertificateClient<CertificateGetPayload<T>>> : CheckSelect<T, Prisma__CertificateClient<Certificate | null >, Prisma__CertificateClient<CertificateGetPayload<T> | null >>

    /**
     * Find zero or more Certificates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Certificates
     * const certificates = await prisma.certificate.findMany()
     * 
     * // Get first 10 Certificates
     * const certificates = await prisma.certificate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const certificateWithIdOnly = await prisma.certificate.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CertificateFindManyArgs>(
      args?: SelectSubset<T, CertificateFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Certificate>>, PrismaPromise<Array<CertificateGetPayload<T>>>>

    /**
     * Create a Certificate.
     * @param {CertificateCreateArgs} args - Arguments to create a Certificate.
     * @example
     * // Create one Certificate
     * const Certificate = await prisma.certificate.create({
     *   data: {
     *     // ... data to create a Certificate
     *   }
     * })
     * 
    **/
    create<T extends CertificateCreateArgs>(
      args: SelectSubset<T, CertificateCreateArgs>
    ): CheckSelect<T, Prisma__CertificateClient<Certificate>, Prisma__CertificateClient<CertificateGetPayload<T>>>

    /**
     * Create many Certificates.
     *     @param {CertificateCreateManyArgs} args - Arguments to create many Certificates.
     *     @example
     *     // Create many Certificates
     *     const certificate = await prisma.certificate.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CertificateCreateManyArgs>(
      args?: SelectSubset<T, CertificateCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Certificate.
     * @param {CertificateDeleteArgs} args - Arguments to delete one Certificate.
     * @example
     * // Delete one Certificate
     * const Certificate = await prisma.certificate.delete({
     *   where: {
     *     // ... filter to delete one Certificate
     *   }
     * })
     * 
    **/
    delete<T extends CertificateDeleteArgs>(
      args: SelectSubset<T, CertificateDeleteArgs>
    ): CheckSelect<T, Prisma__CertificateClient<Certificate>, Prisma__CertificateClient<CertificateGetPayload<T>>>

    /**
     * Update one Certificate.
     * @param {CertificateUpdateArgs} args - Arguments to update one Certificate.
     * @example
     * // Update one Certificate
     * const certificate = await prisma.certificate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CertificateUpdateArgs>(
      args: SelectSubset<T, CertificateUpdateArgs>
    ): CheckSelect<T, Prisma__CertificateClient<Certificate>, Prisma__CertificateClient<CertificateGetPayload<T>>>

    /**
     * Delete zero or more Certificates.
     * @param {CertificateDeleteManyArgs} args - Arguments to filter Certificates to delete.
     * @example
     * // Delete a few Certificates
     * const { count } = await prisma.certificate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CertificateDeleteManyArgs>(
      args?: SelectSubset<T, CertificateDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Certificates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Certificates
     * const certificate = await prisma.certificate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CertificateUpdateManyArgs>(
      args: SelectSubset<T, CertificateUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Certificate.
     * @param {CertificateUpsertArgs} args - Arguments to update or create a Certificate.
     * @example
     * // Update or create a Certificate
     * const certificate = await prisma.certificate.upsert({
     *   create: {
     *     // ... data to create a Certificate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Certificate we want to update
     *   }
     * })
    **/
    upsert<T extends CertificateUpsertArgs>(
      args: SelectSubset<T, CertificateUpsertArgs>
    ): CheckSelect<T, Prisma__CertificateClient<Certificate>, Prisma__CertificateClient<CertificateGetPayload<T>>>

    /**
     * Count the number of Certificates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateCountArgs} args - Arguments to filter Certificates to count.
     * @example
     * // Count the number of Certificates
     * const count = await prisma.certificate.count({
     *   where: {
     *     // ... the filter for the Certificates we want to count
     *   }
     * })
    **/
    count<T extends CertificateCountArgs>(
      args?: Subset<T, CertificateCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CertificateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Certificate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CertificateAggregateArgs>(args: Subset<T, CertificateAggregateArgs>): PrismaPromise<GetCertificateAggregateType<T>>

    /**
     * Group by Certificate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CertificateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CertificateGroupByArgs['orderBy'] }
        : { orderBy?: CertificateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CertificateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCertificateGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Certificate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CertificateClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Purchase<T extends PurchaseFindManyArgs = {}>(args?: Subset<T, PurchaseFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Purchase>>, PrismaPromise<Array<PurchaseGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Certificate findUnique
   */
  export type CertificateFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Certificate
     * 
    **/
    select?: CertificateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CertificateInclude | null
    /**
     * Throw an Error if a Certificate can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Certificate to fetch.
     * 
    **/
    where: CertificateWhereUniqueInput
  }


  /**
   * Certificate findFirst
   */
  export type CertificateFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Certificate
     * 
    **/
    select?: CertificateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CertificateInclude | null
    /**
     * Throw an Error if a Certificate can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Certificate to fetch.
     * 
    **/
    where?: CertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     * 
    **/
    orderBy?: Enumerable<CertificateOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Certificates.
     * 
    **/
    cursor?: CertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Certificates.
     * 
    **/
    distinct?: Enumerable<CertificateScalarFieldEnum>
  }


  /**
   * Certificate findMany
   */
  export type CertificateFindManyArgs = {
    /**
     * Select specific fields to fetch from the Certificate
     * 
    **/
    select?: CertificateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CertificateInclude | null
    /**
     * Filter, which Certificates to fetch.
     * 
    **/
    where?: CertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     * 
    **/
    orderBy?: Enumerable<CertificateOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Certificates.
     * 
    **/
    cursor?: CertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CertificateScalarFieldEnum>
  }


  /**
   * Certificate create
   */
  export type CertificateCreateArgs = {
    /**
     * Select specific fields to fetch from the Certificate
     * 
    **/
    select?: CertificateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CertificateInclude | null
    /**
     * The data needed to create a Certificate.
     * 
    **/
    data: XOR<CertificateCreateInput, CertificateUncheckedCreateInput>
  }


  /**
   * Certificate createMany
   */
  export type CertificateCreateManyArgs = {
    data: Enumerable<CertificateCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Certificate update
   */
  export type CertificateUpdateArgs = {
    /**
     * Select specific fields to fetch from the Certificate
     * 
    **/
    select?: CertificateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CertificateInclude | null
    /**
     * The data needed to update a Certificate.
     * 
    **/
    data: XOR<CertificateUpdateInput, CertificateUncheckedUpdateInput>
    /**
     * Choose, which Certificate to update.
     * 
    **/
    where: CertificateWhereUniqueInput
  }


  /**
   * Certificate updateMany
   */
  export type CertificateUpdateManyArgs = {
    data: XOR<CertificateUpdateManyMutationInput, CertificateUncheckedUpdateManyInput>
    where?: CertificateWhereInput
  }


  /**
   * Certificate upsert
   */
  export type CertificateUpsertArgs = {
    /**
     * Select specific fields to fetch from the Certificate
     * 
    **/
    select?: CertificateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CertificateInclude | null
    /**
     * The filter to search for the Certificate to update in case it exists.
     * 
    **/
    where: CertificateWhereUniqueInput
    /**
     * In case the Certificate found by the `where` argument doesn't exist, create a new Certificate with this data.
     * 
    **/
    create: XOR<CertificateCreateInput, CertificateUncheckedCreateInput>
    /**
     * In case the Certificate was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CertificateUpdateInput, CertificateUncheckedUpdateInput>
  }


  /**
   * Certificate delete
   */
  export type CertificateDeleteArgs = {
    /**
     * Select specific fields to fetch from the Certificate
     * 
    **/
    select?: CertificateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CertificateInclude | null
    /**
     * Filter which Certificate to delete.
     * 
    **/
    where: CertificateWhereUniqueInput
  }


  /**
   * Certificate deleteMany
   */
  export type CertificateDeleteManyArgs = {
    where?: CertificateWhereInput
  }


  /**
   * Certificate without action
   */
  export type CertificateArgs = {
    /**
     * Select specific fields to fetch from the Certificate
     * 
    **/
    select?: CertificateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CertificateInclude | null
  }



  /**
   * Model FilecoinNode
   */


  export type AggregateFilecoinNode = {
    _count: FilecoinNodeCountAggregateOutputType | null
    count: FilecoinNodeCountAggregateOutputType | null
    _min: FilecoinNodeMinAggregateOutputType | null
    min: FilecoinNodeMinAggregateOutputType | null
    _max: FilecoinNodeMaxAggregateOutputType | null
    max: FilecoinNodeMaxAggregateOutputType | null
  }

  export type FilecoinNodeMinAggregateOutputType = {
    id: string | null
    buyerId: string | null
  }

  export type FilecoinNodeMaxAggregateOutputType = {
    id: string | null
    buyerId: string | null
  }

  export type FilecoinNodeCountAggregateOutputType = {
    id: number
    buyerId: number
    _all: number
  }


  export type FilecoinNodeMinAggregateInputType = {
    id?: true
    buyerId?: true
  }

  export type FilecoinNodeMaxAggregateInputType = {
    id?: true
    buyerId?: true
  }

  export type FilecoinNodeCountAggregateInputType = {
    id?: true
    buyerId?: true
    _all?: true
  }

  export type FilecoinNodeAggregateArgs = {
    /**
     * Filter which FilecoinNode to aggregate.
     * 
    **/
    where?: FilecoinNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FilecoinNodes to fetch.
     * 
    **/
    orderBy?: Enumerable<FilecoinNodeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FilecoinNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FilecoinNodes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FilecoinNodes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FilecoinNodes
    **/
    _count?: true | FilecoinNodeCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | FilecoinNodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FilecoinNodeMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: FilecoinNodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FilecoinNodeMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: FilecoinNodeMaxAggregateInputType
  }

  export type GetFilecoinNodeAggregateType<T extends FilecoinNodeAggregateArgs> = {
        [P in keyof T & keyof AggregateFilecoinNode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFilecoinNode[P]>
      : GetScalarType<T[P], AggregateFilecoinNode[P]>
  }


    
    
  export type FilecoinNodeGroupByArgs = {
    where?: FilecoinNodeWhereInput
    orderBy?: Enumerable<FilecoinNodeOrderByInput>
    by: Array<FilecoinNodeScalarFieldEnum>
    having?: FilecoinNodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FilecoinNodeCountAggregateInputType | true
    _min?: FilecoinNodeMinAggregateInputType
    _max?: FilecoinNodeMaxAggregateInputType
  }


  export type FilecoinNodeGroupByOutputType = {
    id: string
    buyerId: string | null
    _count: FilecoinNodeCountAggregateOutputType | null
    _min: FilecoinNodeMinAggregateOutputType | null
    _max: FilecoinNodeMaxAggregateOutputType | null
  }

  type GetFilecoinNodeGroupByPayload<T extends FilecoinNodeGroupByArgs> = Promise<
    Array<
      PickArray<FilecoinNodeGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof FilecoinNodeGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], FilecoinNodeGroupByOutputType[P]> 
            : GetScalarType<T[P], FilecoinNodeGroupByOutputType[P]>
        }
      > 
    >


  export type FilecoinNodeSelect = {
    id?: boolean
    Buyer?: boolean | BuyerArgs
    buyerId?: boolean
  }

  export type FilecoinNodeInclude = {
    Buyer?: boolean | BuyerArgs
  }

  export type FilecoinNodeGetPayload<
    S extends boolean | null | undefined | FilecoinNodeArgs,
    U = keyof S
      > = S extends true
        ? FilecoinNode
    : S extends undefined
    ? never
    : S extends FilecoinNodeArgs | FilecoinNodeFindManyArgs
    ?'include' extends U
    ? FilecoinNode  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Buyer'
        ? BuyerGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof FilecoinNode ?FilecoinNode [P]
  : 
          P extends 'Buyer'
        ? BuyerGetPayload<S['select'][P]> | null : never
  } 
    : FilecoinNode
  : FilecoinNode


  type FilecoinNodeCountArgs = Merge<
    Omit<FilecoinNodeFindManyArgs, 'select' | 'include'> & {
      select?: FilecoinNodeCountAggregateInputType | true
    }
  >

  export interface FilecoinNodeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one FilecoinNode that matches the filter.
     * @param {FilecoinNodeFindUniqueArgs} args - Arguments to find a FilecoinNode
     * @example
     * // Get one FilecoinNode
     * const filecoinNode = await prisma.filecoinNode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FilecoinNodeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FilecoinNodeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FilecoinNode'> extends True ? CheckSelect<T, Prisma__FilecoinNodeClient<FilecoinNode>, Prisma__FilecoinNodeClient<FilecoinNodeGetPayload<T>>> : CheckSelect<T, Prisma__FilecoinNodeClient<FilecoinNode | null >, Prisma__FilecoinNodeClient<FilecoinNodeGetPayload<T> | null >>

    /**
     * Find the first FilecoinNode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilecoinNodeFindFirstArgs} args - Arguments to find a FilecoinNode
     * @example
     * // Get one FilecoinNode
     * const filecoinNode = await prisma.filecoinNode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FilecoinNodeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FilecoinNodeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FilecoinNode'> extends True ? CheckSelect<T, Prisma__FilecoinNodeClient<FilecoinNode>, Prisma__FilecoinNodeClient<FilecoinNodeGetPayload<T>>> : CheckSelect<T, Prisma__FilecoinNodeClient<FilecoinNode | null >, Prisma__FilecoinNodeClient<FilecoinNodeGetPayload<T> | null >>

    /**
     * Find zero or more FilecoinNodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilecoinNodeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FilecoinNodes
     * const filecoinNodes = await prisma.filecoinNode.findMany()
     * 
     * // Get first 10 FilecoinNodes
     * const filecoinNodes = await prisma.filecoinNode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const filecoinNodeWithIdOnly = await prisma.filecoinNode.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FilecoinNodeFindManyArgs>(
      args?: SelectSubset<T, FilecoinNodeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<FilecoinNode>>, PrismaPromise<Array<FilecoinNodeGetPayload<T>>>>

    /**
     * Create a FilecoinNode.
     * @param {FilecoinNodeCreateArgs} args - Arguments to create a FilecoinNode.
     * @example
     * // Create one FilecoinNode
     * const FilecoinNode = await prisma.filecoinNode.create({
     *   data: {
     *     // ... data to create a FilecoinNode
     *   }
     * })
     * 
    **/
    create<T extends FilecoinNodeCreateArgs>(
      args: SelectSubset<T, FilecoinNodeCreateArgs>
    ): CheckSelect<T, Prisma__FilecoinNodeClient<FilecoinNode>, Prisma__FilecoinNodeClient<FilecoinNodeGetPayload<T>>>

    /**
     * Create many FilecoinNodes.
     *     @param {FilecoinNodeCreateManyArgs} args - Arguments to create many FilecoinNodes.
     *     @example
     *     // Create many FilecoinNodes
     *     const filecoinNode = await prisma.filecoinNode.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FilecoinNodeCreateManyArgs>(
      args?: SelectSubset<T, FilecoinNodeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a FilecoinNode.
     * @param {FilecoinNodeDeleteArgs} args - Arguments to delete one FilecoinNode.
     * @example
     * // Delete one FilecoinNode
     * const FilecoinNode = await prisma.filecoinNode.delete({
     *   where: {
     *     // ... filter to delete one FilecoinNode
     *   }
     * })
     * 
    **/
    delete<T extends FilecoinNodeDeleteArgs>(
      args: SelectSubset<T, FilecoinNodeDeleteArgs>
    ): CheckSelect<T, Prisma__FilecoinNodeClient<FilecoinNode>, Prisma__FilecoinNodeClient<FilecoinNodeGetPayload<T>>>

    /**
     * Update one FilecoinNode.
     * @param {FilecoinNodeUpdateArgs} args - Arguments to update one FilecoinNode.
     * @example
     * // Update one FilecoinNode
     * const filecoinNode = await prisma.filecoinNode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FilecoinNodeUpdateArgs>(
      args: SelectSubset<T, FilecoinNodeUpdateArgs>
    ): CheckSelect<T, Prisma__FilecoinNodeClient<FilecoinNode>, Prisma__FilecoinNodeClient<FilecoinNodeGetPayload<T>>>

    /**
     * Delete zero or more FilecoinNodes.
     * @param {FilecoinNodeDeleteManyArgs} args - Arguments to filter FilecoinNodes to delete.
     * @example
     * // Delete a few FilecoinNodes
     * const { count } = await prisma.filecoinNode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FilecoinNodeDeleteManyArgs>(
      args?: SelectSubset<T, FilecoinNodeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more FilecoinNodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilecoinNodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FilecoinNodes
     * const filecoinNode = await prisma.filecoinNode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FilecoinNodeUpdateManyArgs>(
      args: SelectSubset<T, FilecoinNodeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one FilecoinNode.
     * @param {FilecoinNodeUpsertArgs} args - Arguments to update or create a FilecoinNode.
     * @example
     * // Update or create a FilecoinNode
     * const filecoinNode = await prisma.filecoinNode.upsert({
     *   create: {
     *     // ... data to create a FilecoinNode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FilecoinNode we want to update
     *   }
     * })
    **/
    upsert<T extends FilecoinNodeUpsertArgs>(
      args: SelectSubset<T, FilecoinNodeUpsertArgs>
    ): CheckSelect<T, Prisma__FilecoinNodeClient<FilecoinNode>, Prisma__FilecoinNodeClient<FilecoinNodeGetPayload<T>>>

    /**
     * Count the number of FilecoinNodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilecoinNodeCountArgs} args - Arguments to filter FilecoinNodes to count.
     * @example
     * // Count the number of FilecoinNodes
     * const count = await prisma.filecoinNode.count({
     *   where: {
     *     // ... the filter for the FilecoinNodes we want to count
     *   }
     * })
    **/
    count<T extends FilecoinNodeCountArgs>(
      args?: Subset<T, FilecoinNodeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FilecoinNodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FilecoinNode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilecoinNodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FilecoinNodeAggregateArgs>(args: Subset<T, FilecoinNodeAggregateArgs>): PrismaPromise<GetFilecoinNodeAggregateType<T>>

    /**
     * Group by FilecoinNode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilecoinNodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FilecoinNodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FilecoinNodeGroupByArgs['orderBy'] }
        : { orderBy?: FilecoinNodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FilecoinNodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFilecoinNodeGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for FilecoinNode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FilecoinNodeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Buyer<T extends BuyerArgs = {}>(args?: Subset<T, BuyerArgs>): CheckSelect<T, Prisma__BuyerClient<Buyer | null >, Prisma__BuyerClient<BuyerGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * FilecoinNode findUnique
   */
  export type FilecoinNodeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the FilecoinNode
     * 
    **/
    select?: FilecoinNodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FilecoinNodeInclude | null
    /**
     * Throw an Error if a FilecoinNode can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which FilecoinNode to fetch.
     * 
    **/
    where: FilecoinNodeWhereUniqueInput
  }


  /**
   * FilecoinNode findFirst
   */
  export type FilecoinNodeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the FilecoinNode
     * 
    **/
    select?: FilecoinNodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FilecoinNodeInclude | null
    /**
     * Throw an Error if a FilecoinNode can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which FilecoinNode to fetch.
     * 
    **/
    where?: FilecoinNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FilecoinNodes to fetch.
     * 
    **/
    orderBy?: Enumerable<FilecoinNodeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FilecoinNodes.
     * 
    **/
    cursor?: FilecoinNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FilecoinNodes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FilecoinNodes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FilecoinNodes.
     * 
    **/
    distinct?: Enumerable<FilecoinNodeScalarFieldEnum>
  }


  /**
   * FilecoinNode findMany
   */
  export type FilecoinNodeFindManyArgs = {
    /**
     * Select specific fields to fetch from the FilecoinNode
     * 
    **/
    select?: FilecoinNodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FilecoinNodeInclude | null
    /**
     * Filter, which FilecoinNodes to fetch.
     * 
    **/
    where?: FilecoinNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FilecoinNodes to fetch.
     * 
    **/
    orderBy?: Enumerable<FilecoinNodeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FilecoinNodes.
     * 
    **/
    cursor?: FilecoinNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FilecoinNodes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FilecoinNodes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FilecoinNodeScalarFieldEnum>
  }


  /**
   * FilecoinNode create
   */
  export type FilecoinNodeCreateArgs = {
    /**
     * Select specific fields to fetch from the FilecoinNode
     * 
    **/
    select?: FilecoinNodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FilecoinNodeInclude | null
    /**
     * The data needed to create a FilecoinNode.
     * 
    **/
    data: XOR<FilecoinNodeCreateInput, FilecoinNodeUncheckedCreateInput>
  }


  /**
   * FilecoinNode createMany
   */
  export type FilecoinNodeCreateManyArgs = {
    data: Enumerable<FilecoinNodeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FilecoinNode update
   */
  export type FilecoinNodeUpdateArgs = {
    /**
     * Select specific fields to fetch from the FilecoinNode
     * 
    **/
    select?: FilecoinNodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FilecoinNodeInclude | null
    /**
     * The data needed to update a FilecoinNode.
     * 
    **/
    data: XOR<FilecoinNodeUpdateInput, FilecoinNodeUncheckedUpdateInput>
    /**
     * Choose, which FilecoinNode to update.
     * 
    **/
    where: FilecoinNodeWhereUniqueInput
  }


  /**
   * FilecoinNode updateMany
   */
  export type FilecoinNodeUpdateManyArgs = {
    data: XOR<FilecoinNodeUpdateManyMutationInput, FilecoinNodeUncheckedUpdateManyInput>
    where?: FilecoinNodeWhereInput
  }


  /**
   * FilecoinNode upsert
   */
  export type FilecoinNodeUpsertArgs = {
    /**
     * Select specific fields to fetch from the FilecoinNode
     * 
    **/
    select?: FilecoinNodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FilecoinNodeInclude | null
    /**
     * The filter to search for the FilecoinNode to update in case it exists.
     * 
    **/
    where: FilecoinNodeWhereUniqueInput
    /**
     * In case the FilecoinNode found by the `where` argument doesn't exist, create a new FilecoinNode with this data.
     * 
    **/
    create: XOR<FilecoinNodeCreateInput, FilecoinNodeUncheckedCreateInput>
    /**
     * In case the FilecoinNode was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FilecoinNodeUpdateInput, FilecoinNodeUncheckedUpdateInput>
  }


  /**
   * FilecoinNode delete
   */
  export type FilecoinNodeDeleteArgs = {
    /**
     * Select specific fields to fetch from the FilecoinNode
     * 
    **/
    select?: FilecoinNodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FilecoinNodeInclude | null
    /**
     * Filter which FilecoinNode to delete.
     * 
    **/
    where: FilecoinNodeWhereUniqueInput
  }


  /**
   * FilecoinNode deleteMany
   */
  export type FilecoinNodeDeleteManyArgs = {
    where?: FilecoinNodeWhereInput
  }


  /**
   * FilecoinNode without action
   */
  export type FilecoinNodeArgs = {
    /**
     * Select specific fields to fetch from the FilecoinNode
     * 
    **/
    select?: FilecoinNodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FilecoinNodeInclude | null
  }



  /**
   * Model Purchase
   */


  export type AggregatePurchase = {
    _count: PurchaseCountAggregateOutputType | null
    count: PurchaseCountAggregateOutputType | null
    _avg: PurchaseAvgAggregateOutputType | null
    avg: PurchaseAvgAggregateOutputType | null
    _sum: PurchaseSumAggregateOutputType | null
    sum: PurchaseSumAggregateOutputType | null
    _min: PurchaseMinAggregateOutputType | null
    min: PurchaseMinAggregateOutputType | null
    _max: PurchaseMaxAggregateOutputType | null
    max: PurchaseMaxAggregateOutputType | null
  }

  export type PurchaseAvgAggregateOutputType = {
    recsSold: number | null
  }

  export type PurchaseSumAggregateOutputType = {
    recsSold: number | null
  }

  export type PurchaseMinAggregateOutputType = {
    id: string | null
    certificateId: string | null
    buyerId: string | null
    sellerId: string | null
    recsSold: number | null
  }

  export type PurchaseMaxAggregateOutputType = {
    id: string | null
    certificateId: string | null
    buyerId: string | null
    sellerId: string | null
    recsSold: number | null
  }

  export type PurchaseCountAggregateOutputType = {
    id: number
    certificateId: number
    buyerId: number
    sellerId: number
    recsSold: number
    recsTransactions: number
    _all: number
  }


  export type PurchaseAvgAggregateInputType = {
    recsSold?: true
  }

  export type PurchaseSumAggregateInputType = {
    recsSold?: true
  }

  export type PurchaseMinAggregateInputType = {
    id?: true
    certificateId?: true
    buyerId?: true
    sellerId?: true
    recsSold?: true
  }

  export type PurchaseMaxAggregateInputType = {
    id?: true
    certificateId?: true
    buyerId?: true
    sellerId?: true
    recsSold?: true
  }

  export type PurchaseCountAggregateInputType = {
    id?: true
    certificateId?: true
    buyerId?: true
    sellerId?: true
    recsSold?: true
    recsTransactions?: true
    _all?: true
  }

  export type PurchaseAggregateArgs = {
    /**
     * Filter which Purchase to aggregate.
     * 
    **/
    where?: PurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchases to fetch.
     * 
    **/
    orderBy?: Enumerable<PurchaseOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchases from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchases.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Purchases
    **/
    _count?: true | PurchaseCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | PurchaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PurchaseAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: PurchaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PurchaseSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: PurchaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PurchaseMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: PurchaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PurchaseMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: PurchaseMaxAggregateInputType
  }

  export type GetPurchaseAggregateType<T extends PurchaseAggregateArgs> = {
        [P in keyof T & keyof AggregatePurchase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePurchase[P]>
      : GetScalarType<T[P], AggregatePurchase[P]>
  }


    
    
  export type PurchaseGroupByArgs = {
    where?: PurchaseWhereInput
    orderBy?: Enumerable<PurchaseOrderByInput>
    by: Array<PurchaseScalarFieldEnum>
    having?: PurchaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PurchaseCountAggregateInputType | true
    _avg?: PurchaseAvgAggregateInputType
    _sum?: PurchaseSumAggregateInputType
    _min?: PurchaseMinAggregateInputType
    _max?: PurchaseMaxAggregateInputType
  }


  export type PurchaseGroupByOutputType = {
    id: string
    certificateId: string
    buyerId: string | null
    sellerId: string | null
    recsSold: number
    recsTransactions: JsonValue
    _count: PurchaseCountAggregateOutputType | null
    _avg: PurchaseAvgAggregateOutputType | null
    _sum: PurchaseSumAggregateOutputType | null
    _min: PurchaseMinAggregateOutputType | null
    _max: PurchaseMaxAggregateOutputType | null
  }

  type GetPurchaseGroupByPayload<T extends PurchaseGroupByArgs> = Promise<
    Array<
      PickArray<PurchaseGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof PurchaseGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], PurchaseGroupByOutputType[P]> 
            : GetScalarType<T[P], PurchaseGroupByOutputType[P]>
        }
      > 
    >


  export type PurchaseSelect = {
    id?: boolean
    certificate?: boolean | CertificateArgs
    certificateId?: boolean
    buyer?: boolean | BuyerArgs
    buyerId?: boolean
    seller?: boolean | SellerArgs
    sellerId?: boolean
    files?: boolean | FileFindManyArgs
    recsSold?: boolean
    recsTransactions?: boolean
  }

  export type PurchaseInclude = {
    certificate?: boolean | CertificateArgs
    buyer?: boolean | BuyerArgs
    seller?: boolean | SellerArgs
    files?: boolean | FileFindManyArgs
  }

  export type PurchaseGetPayload<
    S extends boolean | null | undefined | PurchaseArgs,
    U = keyof S
      > = S extends true
        ? Purchase
    : S extends undefined
    ? never
    : S extends PurchaseArgs | PurchaseFindManyArgs
    ?'include' extends U
    ? Purchase  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'certificate'
        ? CertificateGetPayload<S['include'][P]> :
        P extends 'buyer'
        ? BuyerGetPayload<S['include'][P]> | null :
        P extends 'seller'
        ? SellerGetPayload<S['include'][P]> | null :
        P extends 'files'
        ? Array < FileGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Purchase ?Purchase [P]
  : 
          P extends 'certificate'
        ? CertificateGetPayload<S['select'][P]> :
        P extends 'buyer'
        ? BuyerGetPayload<S['select'][P]> | null :
        P extends 'seller'
        ? SellerGetPayload<S['select'][P]> | null :
        P extends 'files'
        ? Array < FileGetPayload<S['select'][P]>>  : never
  } 
    : Purchase
  : Purchase


  type PurchaseCountArgs = Merge<
    Omit<PurchaseFindManyArgs, 'select' | 'include'> & {
      select?: PurchaseCountAggregateInputType | true
    }
  >

  export interface PurchaseDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Purchase that matches the filter.
     * @param {PurchaseFindUniqueArgs} args - Arguments to find a Purchase
     * @example
     * // Get one Purchase
     * const purchase = await prisma.purchase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PurchaseFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PurchaseFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Purchase'> extends True ? CheckSelect<T, Prisma__PurchaseClient<Purchase>, Prisma__PurchaseClient<PurchaseGetPayload<T>>> : CheckSelect<T, Prisma__PurchaseClient<Purchase | null >, Prisma__PurchaseClient<PurchaseGetPayload<T> | null >>

    /**
     * Find the first Purchase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseFindFirstArgs} args - Arguments to find a Purchase
     * @example
     * // Get one Purchase
     * const purchase = await prisma.purchase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PurchaseFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PurchaseFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Purchase'> extends True ? CheckSelect<T, Prisma__PurchaseClient<Purchase>, Prisma__PurchaseClient<PurchaseGetPayload<T>>> : CheckSelect<T, Prisma__PurchaseClient<Purchase | null >, Prisma__PurchaseClient<PurchaseGetPayload<T> | null >>

    /**
     * Find zero or more Purchases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Purchases
     * const purchases = await prisma.purchase.findMany()
     * 
     * // Get first 10 Purchases
     * const purchases = await prisma.purchase.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const purchaseWithIdOnly = await prisma.purchase.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PurchaseFindManyArgs>(
      args?: SelectSubset<T, PurchaseFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Purchase>>, PrismaPromise<Array<PurchaseGetPayload<T>>>>

    /**
     * Create a Purchase.
     * @param {PurchaseCreateArgs} args - Arguments to create a Purchase.
     * @example
     * // Create one Purchase
     * const Purchase = await prisma.purchase.create({
     *   data: {
     *     // ... data to create a Purchase
     *   }
     * })
     * 
    **/
    create<T extends PurchaseCreateArgs>(
      args: SelectSubset<T, PurchaseCreateArgs>
    ): CheckSelect<T, Prisma__PurchaseClient<Purchase>, Prisma__PurchaseClient<PurchaseGetPayload<T>>>

    /**
     * Create many Purchases.
     *     @param {PurchaseCreateManyArgs} args - Arguments to create many Purchases.
     *     @example
     *     // Create many Purchases
     *     const purchase = await prisma.purchase.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PurchaseCreateManyArgs>(
      args?: SelectSubset<T, PurchaseCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Purchase.
     * @param {PurchaseDeleteArgs} args - Arguments to delete one Purchase.
     * @example
     * // Delete one Purchase
     * const Purchase = await prisma.purchase.delete({
     *   where: {
     *     // ... filter to delete one Purchase
     *   }
     * })
     * 
    **/
    delete<T extends PurchaseDeleteArgs>(
      args: SelectSubset<T, PurchaseDeleteArgs>
    ): CheckSelect<T, Prisma__PurchaseClient<Purchase>, Prisma__PurchaseClient<PurchaseGetPayload<T>>>

    /**
     * Update one Purchase.
     * @param {PurchaseUpdateArgs} args - Arguments to update one Purchase.
     * @example
     * // Update one Purchase
     * const purchase = await prisma.purchase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PurchaseUpdateArgs>(
      args: SelectSubset<T, PurchaseUpdateArgs>
    ): CheckSelect<T, Prisma__PurchaseClient<Purchase>, Prisma__PurchaseClient<PurchaseGetPayload<T>>>

    /**
     * Delete zero or more Purchases.
     * @param {PurchaseDeleteManyArgs} args - Arguments to filter Purchases to delete.
     * @example
     * // Delete a few Purchases
     * const { count } = await prisma.purchase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PurchaseDeleteManyArgs>(
      args?: SelectSubset<T, PurchaseDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Purchases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Purchases
     * const purchase = await prisma.purchase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PurchaseUpdateManyArgs>(
      args: SelectSubset<T, PurchaseUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Purchase.
     * @param {PurchaseUpsertArgs} args - Arguments to update or create a Purchase.
     * @example
     * // Update or create a Purchase
     * const purchase = await prisma.purchase.upsert({
     *   create: {
     *     // ... data to create a Purchase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Purchase we want to update
     *   }
     * })
    **/
    upsert<T extends PurchaseUpsertArgs>(
      args: SelectSubset<T, PurchaseUpsertArgs>
    ): CheckSelect<T, Prisma__PurchaseClient<Purchase>, Prisma__PurchaseClient<PurchaseGetPayload<T>>>

    /**
     * Count the number of Purchases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseCountArgs} args - Arguments to filter Purchases to count.
     * @example
     * // Count the number of Purchases
     * const count = await prisma.purchase.count({
     *   where: {
     *     // ... the filter for the Purchases we want to count
     *   }
     * })
    **/
    count<T extends PurchaseCountArgs>(
      args?: Subset<T, PurchaseCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PurchaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Purchase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PurchaseAggregateArgs>(args: Subset<T, PurchaseAggregateArgs>): PrismaPromise<GetPurchaseAggregateType<T>>

    /**
     * Group by Purchase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PurchaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PurchaseGroupByArgs['orderBy'] }
        : { orderBy?: PurchaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PurchaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPurchaseGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Purchase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PurchaseClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    certificate<T extends CertificateArgs = {}>(args?: Subset<T, CertificateArgs>): CheckSelect<T, Prisma__CertificateClient<Certificate | null >, Prisma__CertificateClient<CertificateGetPayload<T> | null >>;

    buyer<T extends BuyerArgs = {}>(args?: Subset<T, BuyerArgs>): CheckSelect<T, Prisma__BuyerClient<Buyer | null >, Prisma__BuyerClient<BuyerGetPayload<T> | null >>;

    seller<T extends SellerArgs = {}>(args?: Subset<T, SellerArgs>): CheckSelect<T, Prisma__SellerClient<Seller | null >, Prisma__SellerClient<SellerGetPayload<T> | null >>;

    files<T extends FileFindManyArgs = {}>(args?: Subset<T, FileFindManyArgs>): CheckSelect<T, PrismaPromise<Array<File>>, PrismaPromise<Array<FileGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Purchase findUnique
   */
  export type PurchaseFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Purchase
     * 
    **/
    select?: PurchaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PurchaseInclude | null
    /**
     * Throw an Error if a Purchase can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Purchase to fetch.
     * 
    **/
    where: PurchaseWhereUniqueInput
  }


  /**
   * Purchase findFirst
   */
  export type PurchaseFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Purchase
     * 
    **/
    select?: PurchaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PurchaseInclude | null
    /**
     * Throw an Error if a Purchase can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Purchase to fetch.
     * 
    **/
    where?: PurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchases to fetch.
     * 
    **/
    orderBy?: Enumerable<PurchaseOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Purchases.
     * 
    **/
    cursor?: PurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchases from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchases.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Purchases.
     * 
    **/
    distinct?: Enumerable<PurchaseScalarFieldEnum>
  }


  /**
   * Purchase findMany
   */
  export type PurchaseFindManyArgs = {
    /**
     * Select specific fields to fetch from the Purchase
     * 
    **/
    select?: PurchaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PurchaseInclude | null
    /**
     * Filter, which Purchases to fetch.
     * 
    **/
    where?: PurchaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Purchases to fetch.
     * 
    **/
    orderBy?: Enumerable<PurchaseOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Purchases.
     * 
    **/
    cursor?: PurchaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Purchases from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Purchases.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PurchaseScalarFieldEnum>
  }


  /**
   * Purchase create
   */
  export type PurchaseCreateArgs = {
    /**
     * Select specific fields to fetch from the Purchase
     * 
    **/
    select?: PurchaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PurchaseInclude | null
    /**
     * The data needed to create a Purchase.
     * 
    **/
    data: XOR<PurchaseCreateInput, PurchaseUncheckedCreateInput>
  }


  /**
   * Purchase createMany
   */
  export type PurchaseCreateManyArgs = {
    data: Enumerable<PurchaseCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Purchase update
   */
  export type PurchaseUpdateArgs = {
    /**
     * Select specific fields to fetch from the Purchase
     * 
    **/
    select?: PurchaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PurchaseInclude | null
    /**
     * The data needed to update a Purchase.
     * 
    **/
    data: XOR<PurchaseUpdateInput, PurchaseUncheckedUpdateInput>
    /**
     * Choose, which Purchase to update.
     * 
    **/
    where: PurchaseWhereUniqueInput
  }


  /**
   * Purchase updateMany
   */
  export type PurchaseUpdateManyArgs = {
    data: XOR<PurchaseUpdateManyMutationInput, PurchaseUncheckedUpdateManyInput>
    where?: PurchaseWhereInput
  }


  /**
   * Purchase upsert
   */
  export type PurchaseUpsertArgs = {
    /**
     * Select specific fields to fetch from the Purchase
     * 
    **/
    select?: PurchaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PurchaseInclude | null
    /**
     * The filter to search for the Purchase to update in case it exists.
     * 
    **/
    where: PurchaseWhereUniqueInput
    /**
     * In case the Purchase found by the `where` argument doesn't exist, create a new Purchase with this data.
     * 
    **/
    create: XOR<PurchaseCreateInput, PurchaseUncheckedCreateInput>
    /**
     * In case the Purchase was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PurchaseUpdateInput, PurchaseUncheckedUpdateInput>
  }


  /**
   * Purchase delete
   */
  export type PurchaseDeleteArgs = {
    /**
     * Select specific fields to fetch from the Purchase
     * 
    **/
    select?: PurchaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PurchaseInclude | null
    /**
     * Filter which Purchase to delete.
     * 
    **/
    where: PurchaseWhereUniqueInput
  }


  /**
   * Purchase deleteMany
   */
  export type PurchaseDeleteManyArgs = {
    where?: PurchaseWhereInput
  }


  /**
   * Purchase without action
   */
  export type PurchaseArgs = {
    /**
     * Select specific fields to fetch from the Purchase
     * 
    **/
    select?: PurchaseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PurchaseInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const FileScalarFieldEnum: {
    id: 'id',
    fileName: 'fileName',
    mimeType: 'mimeType',
    createdAt: 'createdAt',
    content: 'content',
    purchaseId: 'purchaseId'
  };

  export type FileScalarFieldEnum = (typeof FileScalarFieldEnum)[keyof typeof FileScalarFieldEnum]


  export const BuyerScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type BuyerScalarFieldEnum = (typeof BuyerScalarFieldEnum)[keyof typeof BuyerScalarFieldEnum]


  export const SellerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    addressLine1: 'addressLine1',
    addressLine2: 'addressLine2',
    contactPerson: 'contactPerson'
  };

  export type SellerScalarFieldEnum = (typeof SellerScalarFieldEnum)[keyof typeof SellerScalarFieldEnum]


  export const CertificateScalarFieldEnum: {
    id: 'id',
    generatorName: 'generatorName',
    generatorId: 'generatorId',
    country: 'country',
    energySource: 'energySource',
    generationStart: 'generationStart',
    generationEnd: 'generationEnd'
  };

  export type CertificateScalarFieldEnum = (typeof CertificateScalarFieldEnum)[keyof typeof CertificateScalarFieldEnum]


  export const FilecoinNodeScalarFieldEnum: {
    id: 'id',
    buyerId: 'buyerId'
  };

  export type FilecoinNodeScalarFieldEnum = (typeof FilecoinNodeScalarFieldEnum)[keyof typeof FilecoinNodeScalarFieldEnum]


  export const PurchaseScalarFieldEnum: {
    id: 'id',
    certificateId: 'certificateId',
    buyerId: 'buyerId',
    sellerId: 'sellerId',
    recsSold: 'recsSold',
    recsTransactions: 'recsTransactions'
  };

  export type PurchaseScalarFieldEnum = (typeof PurchaseScalarFieldEnum)[keyof typeof PurchaseScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type FileWhereInput = {
    AND?: Enumerable<FileWhereInput>
    OR?: Enumerable<FileWhereInput>
    NOT?: Enumerable<FileWhereInput>
    id?: StringFilter | string
    fileName?: StringFilter | string
    mimeType?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    content?: BytesFilter | Buffer
    Purchase?: XOR<PurchaseRelationFilter, PurchaseWhereInput> | null
    purchaseId?: StringNullableFilter | string | null
  }

  export type FileOrderByInput = {
    id?: SortOrder
    fileName?: SortOrder
    mimeType?: SortOrder
    createdAt?: SortOrder
    content?: SortOrder
    purchaseId?: SortOrder
  }

  export type FileWhereUniqueInput = {
    id?: string
  }

  export type FileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FileScalarWhereWithAggregatesInput>
    OR?: Enumerable<FileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FileScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    fileName?: StringWithAggregatesFilter | string
    mimeType?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    content?: BytesWithAggregatesFilter | Buffer
    purchaseId?: StringNullableWithAggregatesFilter | string | null
  }

  export type BuyerWhereInput = {
    AND?: Enumerable<BuyerWhereInput>
    OR?: Enumerable<BuyerWhereInput>
    NOT?: Enumerable<BuyerWhereInput>
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    Purchase?: PurchaseListRelationFilter
    filecoinNodes?: FilecoinNodeListRelationFilter
  }

  export type BuyerOrderByInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type BuyerWhereUniqueInput = {
    id?: string
  }

  export type BuyerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BuyerScalarWhereWithAggregatesInput>
    OR?: Enumerable<BuyerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BuyerScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
  }

  export type SellerWhereInput = {
    AND?: Enumerable<SellerWhereInput>
    OR?: Enumerable<SellerWhereInput>
    NOT?: Enumerable<SellerWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    addressLine1?: StringFilter | string
    addressLine2?: StringFilter | string
    contactPerson?: StringFilter | string
    Purchase?: PurchaseListRelationFilter
  }

  export type SellerOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    contactPerson?: SortOrder
  }

  export type SellerWhereUniqueInput = {
    id?: string
  }

  export type SellerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SellerScalarWhereWithAggregatesInput>
    OR?: Enumerable<SellerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SellerScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    addressLine1?: StringWithAggregatesFilter | string
    addressLine2?: StringWithAggregatesFilter | string
    contactPerson?: StringWithAggregatesFilter | string
  }

  export type CertificateWhereInput = {
    AND?: Enumerable<CertificateWhereInput>
    OR?: Enumerable<CertificateWhereInput>
    NOT?: Enumerable<CertificateWhereInput>
    id?: StringFilter | string
    generatorName?: StringFilter | string
    generatorId?: StringFilter | string
    country?: StringFilter | string
    energySource?: StringFilter | string
    generationStart?: DateTimeFilter | Date | string
    generationEnd?: DateTimeFilter | Date | string
    Purchase?: PurchaseListRelationFilter
  }

  export type CertificateOrderByInput = {
    id?: SortOrder
    generatorName?: SortOrder
    generatorId?: SortOrder
    country?: SortOrder
    energySource?: SortOrder
    generationStart?: SortOrder
    generationEnd?: SortOrder
  }

  export type CertificateWhereUniqueInput = {
    id?: string
  }

  export type CertificateScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CertificateScalarWhereWithAggregatesInput>
    OR?: Enumerable<CertificateScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CertificateScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    generatorName?: StringWithAggregatesFilter | string
    generatorId?: StringWithAggregatesFilter | string
    country?: StringWithAggregatesFilter | string
    energySource?: StringWithAggregatesFilter | string
    generationStart?: DateTimeWithAggregatesFilter | Date | string
    generationEnd?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FilecoinNodeWhereInput = {
    AND?: Enumerable<FilecoinNodeWhereInput>
    OR?: Enumerable<FilecoinNodeWhereInput>
    NOT?: Enumerable<FilecoinNodeWhereInput>
    id?: StringFilter | string
    Buyer?: XOR<BuyerRelationFilter, BuyerWhereInput> | null
    buyerId?: StringNullableFilter | string | null
  }

  export type FilecoinNodeOrderByInput = {
    id?: SortOrder
    buyerId?: SortOrder
  }

  export type FilecoinNodeWhereUniqueInput = {
    id?: string
  }

  export type FilecoinNodeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FilecoinNodeScalarWhereWithAggregatesInput>
    OR?: Enumerable<FilecoinNodeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FilecoinNodeScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    buyerId?: StringNullableWithAggregatesFilter | string | null
  }

  export type PurchaseWhereInput = {
    AND?: Enumerable<PurchaseWhereInput>
    OR?: Enumerable<PurchaseWhereInput>
    NOT?: Enumerable<PurchaseWhereInput>
    id?: StringFilter | string
    certificate?: XOR<CertificateRelationFilter, CertificateWhereInput>
    certificateId?: StringFilter | string
    buyer?: XOR<BuyerRelationFilter, BuyerWhereInput> | null
    buyerId?: StringNullableFilter | string | null
    seller?: XOR<SellerRelationFilter, SellerWhereInput> | null
    sellerId?: StringNullableFilter | string | null
    files?: FileListRelationFilter
    recsSold?: IntFilter | number
    recsTransactions?: JsonFilter
  }

  export type PurchaseOrderByInput = {
    id?: SortOrder
    certificateId?: SortOrder
    buyerId?: SortOrder
    sellerId?: SortOrder
    recsSold?: SortOrder
    recsTransactions?: SortOrder
  }

  export type PurchaseWhereUniqueInput = {
    id?: string
  }

  export type PurchaseScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PurchaseScalarWhereWithAggregatesInput>
    OR?: Enumerable<PurchaseScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PurchaseScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    certificateId?: StringWithAggregatesFilter | string
    buyerId?: StringNullableWithAggregatesFilter | string | null
    sellerId?: StringNullableWithAggregatesFilter | string | null
    recsSold?: IntWithAggregatesFilter | number
    recsTransactions?: JsonWithAggregatesFilter
  }

  export type FileCreateInput = {
    id?: string
    fileName: string
    mimeType: string
    createdAt?: Date | string
    content: Buffer
    Purchase?: PurchaseCreateNestedOneWithoutFilesInput
  }

  export type FileUncheckedCreateInput = {
    id?: string
    fileName: string
    mimeType: string
    createdAt?: Date | string
    content: Buffer
    purchaseId?: string | null
  }

  export type FileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: BytesFieldUpdateOperationsInput | Buffer
    Purchase?: PurchaseUpdateOneWithoutFilesInput
  }

  export type FileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: BytesFieldUpdateOperationsInput | Buffer
    purchaseId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileCreateManyInput = {
    id?: string
    fileName: string
    mimeType: string
    createdAt?: Date | string
    content: Buffer
    purchaseId?: string | null
  }

  export type FileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: BytesFieldUpdateOperationsInput | Buffer
  }

  export type FileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: BytesFieldUpdateOperationsInput | Buffer
    purchaseId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BuyerCreateInput = {
    id?: string
    name?: string | null
    Purchase?: PurchaseCreateNestedManyWithoutBuyerInput
    filecoinNodes?: FilecoinNodeCreateNestedManyWithoutBuyerInput
  }

  export type BuyerUncheckedCreateInput = {
    id?: string
    name?: string | null
    Purchase?: PurchaseUncheckedCreateNestedManyWithoutBuyerInput
    filecoinNodes?: FilecoinNodeUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type BuyerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    Purchase?: PurchaseUpdateManyWithoutBuyerInput
    filecoinNodes?: FilecoinNodeUpdateManyWithoutBuyerInput
  }

  export type BuyerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    Purchase?: PurchaseUncheckedUpdateManyWithoutBuyerInput
    filecoinNodes?: FilecoinNodeUncheckedUpdateManyWithoutBuyerInput
  }

  export type BuyerCreateManyInput = {
    id?: string
    name?: string | null
  }

  export type BuyerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BuyerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SellerCreateInput = {
    id?: string
    name: string
    addressLine1: string
    addressLine2: string
    contactPerson: string
    Purchase?: PurchaseCreateNestedManyWithoutSellerInput
  }

  export type SellerUncheckedCreateInput = {
    id?: string
    name: string
    addressLine1: string
    addressLine2: string
    contactPerson: string
    Purchase?: PurchaseUncheckedCreateNestedManyWithoutSellerInput
  }

  export type SellerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    Purchase?: PurchaseUpdateManyWithoutSellerInput
  }

  export type SellerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    Purchase?: PurchaseUncheckedUpdateManyWithoutSellerInput
  }

  export type SellerCreateManyInput = {
    id?: string
    name: string
    addressLine1: string
    addressLine2: string
    contactPerson: string
  }

  export type SellerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
  }

  export type SellerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
  }

  export type CertificateCreateInput = {
    id?: string
    generatorName: string
    generatorId: string
    country: string
    energySource: string
    generationStart: Date | string
    generationEnd: Date | string
    Purchase?: PurchaseCreateNestedManyWithoutCertificateInput
  }

  export type CertificateUncheckedCreateInput = {
    id?: string
    generatorName: string
    generatorId: string
    country: string
    energySource: string
    generationStart: Date | string
    generationEnd: Date | string
    Purchase?: PurchaseUncheckedCreateNestedManyWithoutCertificateInput
  }

  export type CertificateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    generatorName?: StringFieldUpdateOperationsInput | string
    generatorId?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    energySource?: StringFieldUpdateOperationsInput | string
    generationStart?: DateTimeFieldUpdateOperationsInput | Date | string
    generationEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    Purchase?: PurchaseUpdateManyWithoutCertificateInput
  }

  export type CertificateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    generatorName?: StringFieldUpdateOperationsInput | string
    generatorId?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    energySource?: StringFieldUpdateOperationsInput | string
    generationStart?: DateTimeFieldUpdateOperationsInput | Date | string
    generationEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    Purchase?: PurchaseUncheckedUpdateManyWithoutCertificateInput
  }

  export type CertificateCreateManyInput = {
    id?: string
    generatorName: string
    generatorId: string
    country: string
    energySource: string
    generationStart: Date | string
    generationEnd: Date | string
  }

  export type CertificateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    generatorName?: StringFieldUpdateOperationsInput | string
    generatorId?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    energySource?: StringFieldUpdateOperationsInput | string
    generationStart?: DateTimeFieldUpdateOperationsInput | Date | string
    generationEnd?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    generatorName?: StringFieldUpdateOperationsInput | string
    generatorId?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    energySource?: StringFieldUpdateOperationsInput | string
    generationStart?: DateTimeFieldUpdateOperationsInput | Date | string
    generationEnd?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FilecoinNodeCreateInput = {
    id: string
    Buyer?: BuyerCreateNestedOneWithoutFilecoinNodesInput
  }

  export type FilecoinNodeUncheckedCreateInput = {
    id: string
    buyerId?: string | null
  }

  export type FilecoinNodeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Buyer?: BuyerUpdateOneWithoutFilecoinNodesInput
  }

  export type FilecoinNodeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    buyerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FilecoinNodeCreateManyInput = {
    id: string
    buyerId?: string | null
  }

  export type FilecoinNodeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type FilecoinNodeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    buyerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PurchaseCreateInput = {
    id?: string
    recsSold: number
    recsTransactions: InputJsonValue
    certificate: CertificateCreateNestedOneWithoutPurchaseInput
    buyer?: BuyerCreateNestedOneWithoutPurchaseInput
    seller?: SellerCreateNestedOneWithoutPurchaseInput
    files?: FileCreateNestedManyWithoutPurchaseInput
  }

  export type PurchaseUncheckedCreateInput = {
    id?: string
    certificateId: string
    buyerId?: string | null
    sellerId?: string | null
    recsSold: number
    recsTransactions: InputJsonValue
    files?: FileUncheckedCreateNestedManyWithoutPurchaseInput
  }

  export type PurchaseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    recsSold?: IntFieldUpdateOperationsInput | number
    recsTransactions?: InputJsonValue
    certificate?: CertificateUpdateOneRequiredWithoutPurchaseInput
    buyer?: BuyerUpdateOneWithoutPurchaseInput
    seller?: SellerUpdateOneWithoutPurchaseInput
    files?: FileUpdateManyWithoutPurchaseInput
  }

  export type PurchaseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    certificateId?: StringFieldUpdateOperationsInput | string
    buyerId?: NullableStringFieldUpdateOperationsInput | string | null
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    recsSold?: IntFieldUpdateOperationsInput | number
    recsTransactions?: InputJsonValue
    files?: FileUncheckedUpdateManyWithoutPurchaseInput
  }

  export type PurchaseCreateManyInput = {
    id?: string
    certificateId: string
    buyerId?: string | null
    sellerId?: string | null
    recsSold: number
    recsTransactions: InputJsonValue
  }

  export type PurchaseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    recsSold?: IntFieldUpdateOperationsInput | number
    recsTransactions?: InputJsonValue
  }

  export type PurchaseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    certificateId?: StringFieldUpdateOperationsInput | string
    buyerId?: NullableStringFieldUpdateOperationsInput | string | null
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    recsSold?: IntFieldUpdateOperationsInput | number
    recsTransactions?: InputJsonValue
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type BytesFilter = {
    equals?: Buffer
    not?: NestedBytesFilter | Buffer
  }

  export type PurchaseRelationFilter = {
    is?: PurchaseWhereInput | null
    isNot?: PurchaseWhereInput | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeFilter
  }

  export type BytesWithAggregatesFilter = {
    equals?: Buffer
    not?: NestedBytesWithAggregatesFilter | Buffer
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedBytesFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedBytesFilter
    _max?: NestedBytesFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedBytesFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type PurchaseListRelationFilter = {
    every?: PurchaseWhereInput
    some?: PurchaseWhereInput
    none?: PurchaseWhereInput
  }

  export type FilecoinNodeListRelationFilter = {
    every?: FilecoinNodeWhereInput
    some?: FilecoinNodeWhereInput
    none?: FilecoinNodeWhereInput
  }

  export type BuyerRelationFilter = {
    is?: BuyerWhereInput | null
    isNot?: BuyerWhereInput | null
  }

  export type CertificateRelationFilter = {
    is?: CertificateWhereInput
    isNot?: CertificateWhereInput
  }

  export type SellerRelationFilter = {
    is?: SellerWhereInput | null
    isNot?: SellerWhereInput | null
  }

  export type FileListRelationFilter = {
    every?: FileWhereInput
    some?: FileWhereInput
    none?: FileWhereInput
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }
  export type JsonFilter = 
    | PatchUndefined<
        Either<Required<JsonFilterBase>, Exclude<keyof Required<JsonFilterBase>, 'path'>>,
        Required<JsonFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase>, 'path'>>

  export type JsonFilterBase = {
    equals?: InputJsonValue
    not?: InputJsonValue
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }
  export type JsonWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase>, Exclude<keyof Required<JsonWithAggregatesFilterBase>, 'path'>>,
        Required<JsonWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase>, 'path'>>

  export type JsonWithAggregatesFilterBase = {
    equals?: InputJsonValue
    not?: InputJsonValue
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedJsonFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedJsonFilter
    _max?: NestedJsonFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedJsonFilter
  }

  export type PurchaseCreateNestedOneWithoutFilesInput = {
    create?: XOR<PurchaseCreateWithoutFilesInput, PurchaseUncheckedCreateWithoutFilesInput>
    connectOrCreate?: PurchaseCreateOrConnectWithoutFilesInput
    connect?: PurchaseWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BytesFieldUpdateOperationsInput = {
    set?: Buffer
  }

  export type PurchaseUpdateOneWithoutFilesInput = {
    create?: XOR<PurchaseCreateWithoutFilesInput, PurchaseUncheckedCreateWithoutFilesInput>
    connectOrCreate?: PurchaseCreateOrConnectWithoutFilesInput
    upsert?: PurchaseUpsertWithoutFilesInput
    connect?: PurchaseWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<PurchaseUpdateWithoutFilesInput, PurchaseUncheckedUpdateWithoutFilesInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PurchaseCreateNestedManyWithoutBuyerInput = {
    create?: XOR<Enumerable<PurchaseCreateWithoutBuyerInput>, Enumerable<PurchaseUncheckedCreateWithoutBuyerInput>>
    connectOrCreate?: Enumerable<PurchaseCreateOrConnectWithoutBuyerInput>
    createMany?: PurchaseCreateManyBuyerInputEnvelope
    connect?: Enumerable<PurchaseWhereUniqueInput>
  }

  export type FilecoinNodeCreateNestedManyWithoutBuyerInput = {
    create?: XOR<Enumerable<FilecoinNodeCreateWithoutBuyerInput>, Enumerable<FilecoinNodeUncheckedCreateWithoutBuyerInput>>
    connectOrCreate?: Enumerable<FilecoinNodeCreateOrConnectWithoutBuyerInput>
    createMany?: FilecoinNodeCreateManyBuyerInputEnvelope
    connect?: Enumerable<FilecoinNodeWhereUniqueInput>
  }

  export type PurchaseUncheckedCreateNestedManyWithoutBuyerInput = {
    create?: XOR<Enumerable<PurchaseCreateWithoutBuyerInput>, Enumerable<PurchaseUncheckedCreateWithoutBuyerInput>>
    connectOrCreate?: Enumerable<PurchaseCreateOrConnectWithoutBuyerInput>
    createMany?: PurchaseCreateManyBuyerInputEnvelope
    connect?: Enumerable<PurchaseWhereUniqueInput>
  }

  export type FilecoinNodeUncheckedCreateNestedManyWithoutBuyerInput = {
    create?: XOR<Enumerable<FilecoinNodeCreateWithoutBuyerInput>, Enumerable<FilecoinNodeUncheckedCreateWithoutBuyerInput>>
    connectOrCreate?: Enumerable<FilecoinNodeCreateOrConnectWithoutBuyerInput>
    createMany?: FilecoinNodeCreateManyBuyerInputEnvelope
    connect?: Enumerable<FilecoinNodeWhereUniqueInput>
  }

  export type PurchaseUpdateManyWithoutBuyerInput = {
    create?: XOR<Enumerable<PurchaseCreateWithoutBuyerInput>, Enumerable<PurchaseUncheckedCreateWithoutBuyerInput>>
    connectOrCreate?: Enumerable<PurchaseCreateOrConnectWithoutBuyerInput>
    upsert?: Enumerable<PurchaseUpsertWithWhereUniqueWithoutBuyerInput>
    createMany?: PurchaseCreateManyBuyerInputEnvelope
    connect?: Enumerable<PurchaseWhereUniqueInput>
    set?: Enumerable<PurchaseWhereUniqueInput>
    disconnect?: Enumerable<PurchaseWhereUniqueInput>
    delete?: Enumerable<PurchaseWhereUniqueInput>
    update?: Enumerable<PurchaseUpdateWithWhereUniqueWithoutBuyerInput>
    updateMany?: Enumerable<PurchaseUpdateManyWithWhereWithoutBuyerInput>
    deleteMany?: Enumerable<PurchaseScalarWhereInput>
  }

  export type FilecoinNodeUpdateManyWithoutBuyerInput = {
    create?: XOR<Enumerable<FilecoinNodeCreateWithoutBuyerInput>, Enumerable<FilecoinNodeUncheckedCreateWithoutBuyerInput>>
    connectOrCreate?: Enumerable<FilecoinNodeCreateOrConnectWithoutBuyerInput>
    upsert?: Enumerable<FilecoinNodeUpsertWithWhereUniqueWithoutBuyerInput>
    createMany?: FilecoinNodeCreateManyBuyerInputEnvelope
    connect?: Enumerable<FilecoinNodeWhereUniqueInput>
    set?: Enumerable<FilecoinNodeWhereUniqueInput>
    disconnect?: Enumerable<FilecoinNodeWhereUniqueInput>
    delete?: Enumerable<FilecoinNodeWhereUniqueInput>
    update?: Enumerable<FilecoinNodeUpdateWithWhereUniqueWithoutBuyerInput>
    updateMany?: Enumerable<FilecoinNodeUpdateManyWithWhereWithoutBuyerInput>
    deleteMany?: Enumerable<FilecoinNodeScalarWhereInput>
  }

  export type PurchaseUncheckedUpdateManyWithoutBuyerInput = {
    create?: XOR<Enumerable<PurchaseCreateWithoutBuyerInput>, Enumerable<PurchaseUncheckedCreateWithoutBuyerInput>>
    connectOrCreate?: Enumerable<PurchaseCreateOrConnectWithoutBuyerInput>
    upsert?: Enumerable<PurchaseUpsertWithWhereUniqueWithoutBuyerInput>
    createMany?: PurchaseCreateManyBuyerInputEnvelope
    connect?: Enumerable<PurchaseWhereUniqueInput>
    set?: Enumerable<PurchaseWhereUniqueInput>
    disconnect?: Enumerable<PurchaseWhereUniqueInput>
    delete?: Enumerable<PurchaseWhereUniqueInput>
    update?: Enumerable<PurchaseUpdateWithWhereUniqueWithoutBuyerInput>
    updateMany?: Enumerable<PurchaseUpdateManyWithWhereWithoutBuyerInput>
    deleteMany?: Enumerable<PurchaseScalarWhereInput>
  }

  export type FilecoinNodeUncheckedUpdateManyWithoutBuyerInput = {
    create?: XOR<Enumerable<FilecoinNodeCreateWithoutBuyerInput>, Enumerable<FilecoinNodeUncheckedCreateWithoutBuyerInput>>
    connectOrCreate?: Enumerable<FilecoinNodeCreateOrConnectWithoutBuyerInput>
    upsert?: Enumerable<FilecoinNodeUpsertWithWhereUniqueWithoutBuyerInput>
    createMany?: FilecoinNodeCreateManyBuyerInputEnvelope
    connect?: Enumerable<FilecoinNodeWhereUniqueInput>
    set?: Enumerable<FilecoinNodeWhereUniqueInput>
    disconnect?: Enumerable<FilecoinNodeWhereUniqueInput>
    delete?: Enumerable<FilecoinNodeWhereUniqueInput>
    update?: Enumerable<FilecoinNodeUpdateWithWhereUniqueWithoutBuyerInput>
    updateMany?: Enumerable<FilecoinNodeUpdateManyWithWhereWithoutBuyerInput>
    deleteMany?: Enumerable<FilecoinNodeScalarWhereInput>
  }

  export type PurchaseCreateNestedManyWithoutSellerInput = {
    create?: XOR<Enumerable<PurchaseCreateWithoutSellerInput>, Enumerable<PurchaseUncheckedCreateWithoutSellerInput>>
    connectOrCreate?: Enumerable<PurchaseCreateOrConnectWithoutSellerInput>
    createMany?: PurchaseCreateManySellerInputEnvelope
    connect?: Enumerable<PurchaseWhereUniqueInput>
  }

  export type PurchaseUncheckedCreateNestedManyWithoutSellerInput = {
    create?: XOR<Enumerable<PurchaseCreateWithoutSellerInput>, Enumerable<PurchaseUncheckedCreateWithoutSellerInput>>
    connectOrCreate?: Enumerable<PurchaseCreateOrConnectWithoutSellerInput>
    createMany?: PurchaseCreateManySellerInputEnvelope
    connect?: Enumerable<PurchaseWhereUniqueInput>
  }

  export type PurchaseUpdateManyWithoutSellerInput = {
    create?: XOR<Enumerable<PurchaseCreateWithoutSellerInput>, Enumerable<PurchaseUncheckedCreateWithoutSellerInput>>
    connectOrCreate?: Enumerable<PurchaseCreateOrConnectWithoutSellerInput>
    upsert?: Enumerable<PurchaseUpsertWithWhereUniqueWithoutSellerInput>
    createMany?: PurchaseCreateManySellerInputEnvelope
    connect?: Enumerable<PurchaseWhereUniqueInput>
    set?: Enumerable<PurchaseWhereUniqueInput>
    disconnect?: Enumerable<PurchaseWhereUniqueInput>
    delete?: Enumerable<PurchaseWhereUniqueInput>
    update?: Enumerable<PurchaseUpdateWithWhereUniqueWithoutSellerInput>
    updateMany?: Enumerable<PurchaseUpdateManyWithWhereWithoutSellerInput>
    deleteMany?: Enumerable<PurchaseScalarWhereInput>
  }

  export type PurchaseUncheckedUpdateManyWithoutSellerInput = {
    create?: XOR<Enumerable<PurchaseCreateWithoutSellerInput>, Enumerable<PurchaseUncheckedCreateWithoutSellerInput>>
    connectOrCreate?: Enumerable<PurchaseCreateOrConnectWithoutSellerInput>
    upsert?: Enumerable<PurchaseUpsertWithWhereUniqueWithoutSellerInput>
    createMany?: PurchaseCreateManySellerInputEnvelope
    connect?: Enumerable<PurchaseWhereUniqueInput>
    set?: Enumerable<PurchaseWhereUniqueInput>
    disconnect?: Enumerable<PurchaseWhereUniqueInput>
    delete?: Enumerable<PurchaseWhereUniqueInput>
    update?: Enumerable<PurchaseUpdateWithWhereUniqueWithoutSellerInput>
    updateMany?: Enumerable<PurchaseUpdateManyWithWhereWithoutSellerInput>
    deleteMany?: Enumerable<PurchaseScalarWhereInput>
  }

  export type PurchaseCreateNestedManyWithoutCertificateInput = {
    create?: XOR<Enumerable<PurchaseCreateWithoutCertificateInput>, Enumerable<PurchaseUncheckedCreateWithoutCertificateInput>>
    connectOrCreate?: Enumerable<PurchaseCreateOrConnectWithoutCertificateInput>
    createMany?: PurchaseCreateManyCertificateInputEnvelope
    connect?: Enumerable<PurchaseWhereUniqueInput>
  }

  export type PurchaseUncheckedCreateNestedManyWithoutCertificateInput = {
    create?: XOR<Enumerable<PurchaseCreateWithoutCertificateInput>, Enumerable<PurchaseUncheckedCreateWithoutCertificateInput>>
    connectOrCreate?: Enumerable<PurchaseCreateOrConnectWithoutCertificateInput>
    createMany?: PurchaseCreateManyCertificateInputEnvelope
    connect?: Enumerable<PurchaseWhereUniqueInput>
  }

  export type PurchaseUpdateManyWithoutCertificateInput = {
    create?: XOR<Enumerable<PurchaseCreateWithoutCertificateInput>, Enumerable<PurchaseUncheckedCreateWithoutCertificateInput>>
    connectOrCreate?: Enumerable<PurchaseCreateOrConnectWithoutCertificateInput>
    upsert?: Enumerable<PurchaseUpsertWithWhereUniqueWithoutCertificateInput>
    createMany?: PurchaseCreateManyCertificateInputEnvelope
    connect?: Enumerable<PurchaseWhereUniqueInput>
    set?: Enumerable<PurchaseWhereUniqueInput>
    disconnect?: Enumerable<PurchaseWhereUniqueInput>
    delete?: Enumerable<PurchaseWhereUniqueInput>
    update?: Enumerable<PurchaseUpdateWithWhereUniqueWithoutCertificateInput>
    updateMany?: Enumerable<PurchaseUpdateManyWithWhereWithoutCertificateInput>
    deleteMany?: Enumerable<PurchaseScalarWhereInput>
  }

  export type PurchaseUncheckedUpdateManyWithoutCertificateInput = {
    create?: XOR<Enumerable<PurchaseCreateWithoutCertificateInput>, Enumerable<PurchaseUncheckedCreateWithoutCertificateInput>>
    connectOrCreate?: Enumerable<PurchaseCreateOrConnectWithoutCertificateInput>
    upsert?: Enumerable<PurchaseUpsertWithWhereUniqueWithoutCertificateInput>
    createMany?: PurchaseCreateManyCertificateInputEnvelope
    connect?: Enumerable<PurchaseWhereUniqueInput>
    set?: Enumerable<PurchaseWhereUniqueInput>
    disconnect?: Enumerable<PurchaseWhereUniqueInput>
    delete?: Enumerable<PurchaseWhereUniqueInput>
    update?: Enumerable<PurchaseUpdateWithWhereUniqueWithoutCertificateInput>
    updateMany?: Enumerable<PurchaseUpdateManyWithWhereWithoutCertificateInput>
    deleteMany?: Enumerable<PurchaseScalarWhereInput>
  }

  export type BuyerCreateNestedOneWithoutFilecoinNodesInput = {
    create?: XOR<BuyerCreateWithoutFilecoinNodesInput, BuyerUncheckedCreateWithoutFilecoinNodesInput>
    connectOrCreate?: BuyerCreateOrConnectWithoutFilecoinNodesInput
    connect?: BuyerWhereUniqueInput
  }

  export type BuyerUpdateOneWithoutFilecoinNodesInput = {
    create?: XOR<BuyerCreateWithoutFilecoinNodesInput, BuyerUncheckedCreateWithoutFilecoinNodesInput>
    connectOrCreate?: BuyerCreateOrConnectWithoutFilecoinNodesInput
    upsert?: BuyerUpsertWithoutFilecoinNodesInput
    connect?: BuyerWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<BuyerUpdateWithoutFilecoinNodesInput, BuyerUncheckedUpdateWithoutFilecoinNodesInput>
  }

  export type CertificateCreateNestedOneWithoutPurchaseInput = {
    create?: XOR<CertificateCreateWithoutPurchaseInput, CertificateUncheckedCreateWithoutPurchaseInput>
    connectOrCreate?: CertificateCreateOrConnectWithoutPurchaseInput
    connect?: CertificateWhereUniqueInput
  }

  export type BuyerCreateNestedOneWithoutPurchaseInput = {
    create?: XOR<BuyerCreateWithoutPurchaseInput, BuyerUncheckedCreateWithoutPurchaseInput>
    connectOrCreate?: BuyerCreateOrConnectWithoutPurchaseInput
    connect?: BuyerWhereUniqueInput
  }

  export type SellerCreateNestedOneWithoutPurchaseInput = {
    create?: XOR<SellerCreateWithoutPurchaseInput, SellerUncheckedCreateWithoutPurchaseInput>
    connectOrCreate?: SellerCreateOrConnectWithoutPurchaseInput
    connect?: SellerWhereUniqueInput
  }

  export type FileCreateNestedManyWithoutPurchaseInput = {
    create?: XOR<Enumerable<FileCreateWithoutPurchaseInput>, Enumerable<FileUncheckedCreateWithoutPurchaseInput>>
    connectOrCreate?: Enumerable<FileCreateOrConnectWithoutPurchaseInput>
    createMany?: FileCreateManyPurchaseInputEnvelope
    connect?: Enumerable<FileWhereUniqueInput>
  }

  export type FileUncheckedCreateNestedManyWithoutPurchaseInput = {
    create?: XOR<Enumerable<FileCreateWithoutPurchaseInput>, Enumerable<FileUncheckedCreateWithoutPurchaseInput>>
    connectOrCreate?: Enumerable<FileCreateOrConnectWithoutPurchaseInput>
    createMany?: FileCreateManyPurchaseInputEnvelope
    connect?: Enumerable<FileWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CertificateUpdateOneRequiredWithoutPurchaseInput = {
    create?: XOR<CertificateCreateWithoutPurchaseInput, CertificateUncheckedCreateWithoutPurchaseInput>
    connectOrCreate?: CertificateCreateOrConnectWithoutPurchaseInput
    upsert?: CertificateUpsertWithoutPurchaseInput
    connect?: CertificateWhereUniqueInput
    update?: XOR<CertificateUpdateWithoutPurchaseInput, CertificateUncheckedUpdateWithoutPurchaseInput>
  }

  export type BuyerUpdateOneWithoutPurchaseInput = {
    create?: XOR<BuyerCreateWithoutPurchaseInput, BuyerUncheckedCreateWithoutPurchaseInput>
    connectOrCreate?: BuyerCreateOrConnectWithoutPurchaseInput
    upsert?: BuyerUpsertWithoutPurchaseInput
    connect?: BuyerWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<BuyerUpdateWithoutPurchaseInput, BuyerUncheckedUpdateWithoutPurchaseInput>
  }

  export type SellerUpdateOneWithoutPurchaseInput = {
    create?: XOR<SellerCreateWithoutPurchaseInput, SellerUncheckedCreateWithoutPurchaseInput>
    connectOrCreate?: SellerCreateOrConnectWithoutPurchaseInput
    upsert?: SellerUpsertWithoutPurchaseInput
    connect?: SellerWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<SellerUpdateWithoutPurchaseInput, SellerUncheckedUpdateWithoutPurchaseInput>
  }

  export type FileUpdateManyWithoutPurchaseInput = {
    create?: XOR<Enumerable<FileCreateWithoutPurchaseInput>, Enumerable<FileUncheckedCreateWithoutPurchaseInput>>
    connectOrCreate?: Enumerable<FileCreateOrConnectWithoutPurchaseInput>
    upsert?: Enumerable<FileUpsertWithWhereUniqueWithoutPurchaseInput>
    createMany?: FileCreateManyPurchaseInputEnvelope
    connect?: Enumerable<FileWhereUniqueInput>
    set?: Enumerable<FileWhereUniqueInput>
    disconnect?: Enumerable<FileWhereUniqueInput>
    delete?: Enumerable<FileWhereUniqueInput>
    update?: Enumerable<FileUpdateWithWhereUniqueWithoutPurchaseInput>
    updateMany?: Enumerable<FileUpdateManyWithWhereWithoutPurchaseInput>
    deleteMany?: Enumerable<FileScalarWhereInput>
  }

  export type FileUncheckedUpdateManyWithoutPurchaseInput = {
    create?: XOR<Enumerable<FileCreateWithoutPurchaseInput>, Enumerable<FileUncheckedCreateWithoutPurchaseInput>>
    connectOrCreate?: Enumerable<FileCreateOrConnectWithoutPurchaseInput>
    upsert?: Enumerable<FileUpsertWithWhereUniqueWithoutPurchaseInput>
    createMany?: FileCreateManyPurchaseInputEnvelope
    connect?: Enumerable<FileWhereUniqueInput>
    set?: Enumerable<FileWhereUniqueInput>
    disconnect?: Enumerable<FileWhereUniqueInput>
    delete?: Enumerable<FileWhereUniqueInput>
    update?: Enumerable<FileUpdateWithWhereUniqueWithoutPurchaseInput>
    updateMany?: Enumerable<FileUpdateManyWithWhereWithoutPurchaseInput>
    deleteMany?: Enumerable<FileScalarWhereInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedBytesFilter = {
    equals?: Buffer
    not?: NestedBytesFilter | Buffer
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeFilter
  }

  export type NestedBytesWithAggregatesFilter = {
    equals?: Buffer
    not?: NestedBytesWithAggregatesFilter | Buffer
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedBytesFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedBytesFilter
    _max?: NestedBytesFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedBytesFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }
  export type NestedJsonFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase>, Exclude<keyof Required<NestedJsonFilterBase>, 'path'>>,
        Required<NestedJsonFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase>, 'path'>>

  export type NestedJsonFilterBase = {
    equals?: InputJsonValue
    not?: InputJsonValue
  }

  export type PurchaseCreateWithoutFilesInput = {
    id?: string
    recsSold: number
    recsTransactions: InputJsonValue
    certificate: CertificateCreateNestedOneWithoutPurchaseInput
    buyer?: BuyerCreateNestedOneWithoutPurchaseInput
    seller?: SellerCreateNestedOneWithoutPurchaseInput
  }

  export type PurchaseUncheckedCreateWithoutFilesInput = {
    id?: string
    certificateId: string
    buyerId?: string | null
    sellerId?: string | null
    recsSold: number
    recsTransactions: InputJsonValue
  }

  export type PurchaseCreateOrConnectWithoutFilesInput = {
    where: PurchaseWhereUniqueInput
    create: XOR<PurchaseCreateWithoutFilesInput, PurchaseUncheckedCreateWithoutFilesInput>
  }

  export type PurchaseUpsertWithoutFilesInput = {
    update: XOR<PurchaseUpdateWithoutFilesInput, PurchaseUncheckedUpdateWithoutFilesInput>
    create: XOR<PurchaseCreateWithoutFilesInput, PurchaseUncheckedCreateWithoutFilesInput>
  }

  export type PurchaseUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    recsSold?: IntFieldUpdateOperationsInput | number
    recsTransactions?: InputJsonValue
    certificate?: CertificateUpdateOneRequiredWithoutPurchaseInput
    buyer?: BuyerUpdateOneWithoutPurchaseInput
    seller?: SellerUpdateOneWithoutPurchaseInput
  }

  export type PurchaseUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    certificateId?: StringFieldUpdateOperationsInput | string
    buyerId?: NullableStringFieldUpdateOperationsInput | string | null
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    recsSold?: IntFieldUpdateOperationsInput | number
    recsTransactions?: InputJsonValue
  }

  export type PurchaseCreateWithoutBuyerInput = {
    id?: string
    recsSold: number
    recsTransactions: InputJsonValue
    certificate: CertificateCreateNestedOneWithoutPurchaseInput
    seller?: SellerCreateNestedOneWithoutPurchaseInput
    files?: FileCreateNestedManyWithoutPurchaseInput
  }

  export type PurchaseUncheckedCreateWithoutBuyerInput = {
    id?: string
    certificateId: string
    sellerId?: string | null
    recsSold: number
    recsTransactions: InputJsonValue
    files?: FileUncheckedCreateNestedManyWithoutPurchaseInput
  }

  export type PurchaseCreateOrConnectWithoutBuyerInput = {
    where: PurchaseWhereUniqueInput
    create: XOR<PurchaseCreateWithoutBuyerInput, PurchaseUncheckedCreateWithoutBuyerInput>
  }

  export type PurchaseCreateManyBuyerInputEnvelope = {
    data: Enumerable<PurchaseCreateManyBuyerInput>
    skipDuplicates?: boolean
  }

  export type FilecoinNodeCreateWithoutBuyerInput = {
    id: string
  }

  export type FilecoinNodeUncheckedCreateWithoutBuyerInput = {
    id: string
  }

  export type FilecoinNodeCreateOrConnectWithoutBuyerInput = {
    where: FilecoinNodeWhereUniqueInput
    create: XOR<FilecoinNodeCreateWithoutBuyerInput, FilecoinNodeUncheckedCreateWithoutBuyerInput>
  }

  export type FilecoinNodeCreateManyBuyerInputEnvelope = {
    data: Enumerable<FilecoinNodeCreateManyBuyerInput>
    skipDuplicates?: boolean
  }

  export type PurchaseUpsertWithWhereUniqueWithoutBuyerInput = {
    where: PurchaseWhereUniqueInput
    update: XOR<PurchaseUpdateWithoutBuyerInput, PurchaseUncheckedUpdateWithoutBuyerInput>
    create: XOR<PurchaseCreateWithoutBuyerInput, PurchaseUncheckedCreateWithoutBuyerInput>
  }

  export type PurchaseUpdateWithWhereUniqueWithoutBuyerInput = {
    where: PurchaseWhereUniqueInput
    data: XOR<PurchaseUpdateWithoutBuyerInput, PurchaseUncheckedUpdateWithoutBuyerInput>
  }

  export type PurchaseUpdateManyWithWhereWithoutBuyerInput = {
    where: PurchaseScalarWhereInput
    data: XOR<PurchaseUpdateManyMutationInput, PurchaseUncheckedUpdateManyWithoutPurchaseInput>
  }

  export type PurchaseScalarWhereInput = {
    AND?: Enumerable<PurchaseScalarWhereInput>
    OR?: Enumerable<PurchaseScalarWhereInput>
    NOT?: Enumerable<PurchaseScalarWhereInput>
    id?: StringFilter | string
    certificateId?: StringFilter | string
    buyerId?: StringNullableFilter | string | null
    sellerId?: StringNullableFilter | string | null
    recsSold?: IntFilter | number
    recsTransactions?: JsonFilter
  }

  export type FilecoinNodeUpsertWithWhereUniqueWithoutBuyerInput = {
    where: FilecoinNodeWhereUniqueInput
    update: XOR<FilecoinNodeUpdateWithoutBuyerInput, FilecoinNodeUncheckedUpdateWithoutBuyerInput>
    create: XOR<FilecoinNodeCreateWithoutBuyerInput, FilecoinNodeUncheckedCreateWithoutBuyerInput>
  }

  export type FilecoinNodeUpdateWithWhereUniqueWithoutBuyerInput = {
    where: FilecoinNodeWhereUniqueInput
    data: XOR<FilecoinNodeUpdateWithoutBuyerInput, FilecoinNodeUncheckedUpdateWithoutBuyerInput>
  }

  export type FilecoinNodeUpdateManyWithWhereWithoutBuyerInput = {
    where: FilecoinNodeScalarWhereInput
    data: XOR<FilecoinNodeUpdateManyMutationInput, FilecoinNodeUncheckedUpdateManyWithoutFilecoinNodesInput>
  }

  export type FilecoinNodeScalarWhereInput = {
    AND?: Enumerable<FilecoinNodeScalarWhereInput>
    OR?: Enumerable<FilecoinNodeScalarWhereInput>
    NOT?: Enumerable<FilecoinNodeScalarWhereInput>
    id?: StringFilter | string
    buyerId?: StringNullableFilter | string | null
  }

  export type PurchaseCreateWithoutSellerInput = {
    id?: string
    recsSold: number
    recsTransactions: InputJsonValue
    certificate: CertificateCreateNestedOneWithoutPurchaseInput
    buyer?: BuyerCreateNestedOneWithoutPurchaseInput
    files?: FileCreateNestedManyWithoutPurchaseInput
  }

  export type PurchaseUncheckedCreateWithoutSellerInput = {
    id?: string
    certificateId: string
    buyerId?: string | null
    recsSold: number
    recsTransactions: InputJsonValue
    files?: FileUncheckedCreateNestedManyWithoutPurchaseInput
  }

  export type PurchaseCreateOrConnectWithoutSellerInput = {
    where: PurchaseWhereUniqueInput
    create: XOR<PurchaseCreateWithoutSellerInput, PurchaseUncheckedCreateWithoutSellerInput>
  }

  export type PurchaseCreateManySellerInputEnvelope = {
    data: Enumerable<PurchaseCreateManySellerInput>
    skipDuplicates?: boolean
  }

  export type PurchaseUpsertWithWhereUniqueWithoutSellerInput = {
    where: PurchaseWhereUniqueInput
    update: XOR<PurchaseUpdateWithoutSellerInput, PurchaseUncheckedUpdateWithoutSellerInput>
    create: XOR<PurchaseCreateWithoutSellerInput, PurchaseUncheckedCreateWithoutSellerInput>
  }

  export type PurchaseUpdateWithWhereUniqueWithoutSellerInput = {
    where: PurchaseWhereUniqueInput
    data: XOR<PurchaseUpdateWithoutSellerInput, PurchaseUncheckedUpdateWithoutSellerInput>
  }

  export type PurchaseUpdateManyWithWhereWithoutSellerInput = {
    where: PurchaseScalarWhereInput
    data: XOR<PurchaseUpdateManyMutationInput, PurchaseUncheckedUpdateManyWithoutPurchaseInput>
  }

  export type PurchaseCreateWithoutCertificateInput = {
    id?: string
    recsSold: number
    recsTransactions: InputJsonValue
    buyer?: BuyerCreateNestedOneWithoutPurchaseInput
    seller?: SellerCreateNestedOneWithoutPurchaseInput
    files?: FileCreateNestedManyWithoutPurchaseInput
  }

  export type PurchaseUncheckedCreateWithoutCertificateInput = {
    id?: string
    buyerId?: string | null
    sellerId?: string | null
    recsSold: number
    recsTransactions: InputJsonValue
    files?: FileUncheckedCreateNestedManyWithoutPurchaseInput
  }

  export type PurchaseCreateOrConnectWithoutCertificateInput = {
    where: PurchaseWhereUniqueInput
    create: XOR<PurchaseCreateWithoutCertificateInput, PurchaseUncheckedCreateWithoutCertificateInput>
  }

  export type PurchaseCreateManyCertificateInputEnvelope = {
    data: Enumerable<PurchaseCreateManyCertificateInput>
    skipDuplicates?: boolean
  }

  export type PurchaseUpsertWithWhereUniqueWithoutCertificateInput = {
    where: PurchaseWhereUniqueInput
    update: XOR<PurchaseUpdateWithoutCertificateInput, PurchaseUncheckedUpdateWithoutCertificateInput>
    create: XOR<PurchaseCreateWithoutCertificateInput, PurchaseUncheckedCreateWithoutCertificateInput>
  }

  export type PurchaseUpdateWithWhereUniqueWithoutCertificateInput = {
    where: PurchaseWhereUniqueInput
    data: XOR<PurchaseUpdateWithoutCertificateInput, PurchaseUncheckedUpdateWithoutCertificateInput>
  }

  export type PurchaseUpdateManyWithWhereWithoutCertificateInput = {
    where: PurchaseScalarWhereInput
    data: XOR<PurchaseUpdateManyMutationInput, PurchaseUncheckedUpdateManyWithoutPurchaseInput>
  }

  export type BuyerCreateWithoutFilecoinNodesInput = {
    id?: string
    name?: string | null
    Purchase?: PurchaseCreateNestedManyWithoutBuyerInput
  }

  export type BuyerUncheckedCreateWithoutFilecoinNodesInput = {
    id?: string
    name?: string | null
    Purchase?: PurchaseUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type BuyerCreateOrConnectWithoutFilecoinNodesInput = {
    where: BuyerWhereUniqueInput
    create: XOR<BuyerCreateWithoutFilecoinNodesInput, BuyerUncheckedCreateWithoutFilecoinNodesInput>
  }

  export type BuyerUpsertWithoutFilecoinNodesInput = {
    update: XOR<BuyerUpdateWithoutFilecoinNodesInput, BuyerUncheckedUpdateWithoutFilecoinNodesInput>
    create: XOR<BuyerCreateWithoutFilecoinNodesInput, BuyerUncheckedCreateWithoutFilecoinNodesInput>
  }

  export type BuyerUpdateWithoutFilecoinNodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    Purchase?: PurchaseUpdateManyWithoutBuyerInput
  }

  export type BuyerUncheckedUpdateWithoutFilecoinNodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    Purchase?: PurchaseUncheckedUpdateManyWithoutBuyerInput
  }

  export type CertificateCreateWithoutPurchaseInput = {
    id?: string
    generatorName: string
    generatorId: string
    country: string
    energySource: string
    generationStart: Date | string
    generationEnd: Date | string
  }

  export type CertificateUncheckedCreateWithoutPurchaseInput = {
    id?: string
    generatorName: string
    generatorId: string
    country: string
    energySource: string
    generationStart: Date | string
    generationEnd: Date | string
  }

  export type CertificateCreateOrConnectWithoutPurchaseInput = {
    where: CertificateWhereUniqueInput
    create: XOR<CertificateCreateWithoutPurchaseInput, CertificateUncheckedCreateWithoutPurchaseInput>
  }

  export type BuyerCreateWithoutPurchaseInput = {
    id?: string
    name?: string | null
    filecoinNodes?: FilecoinNodeCreateNestedManyWithoutBuyerInput
  }

  export type BuyerUncheckedCreateWithoutPurchaseInput = {
    id?: string
    name?: string | null
    filecoinNodes?: FilecoinNodeUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type BuyerCreateOrConnectWithoutPurchaseInput = {
    where: BuyerWhereUniqueInput
    create: XOR<BuyerCreateWithoutPurchaseInput, BuyerUncheckedCreateWithoutPurchaseInput>
  }

  export type SellerCreateWithoutPurchaseInput = {
    id?: string
    name: string
    addressLine1: string
    addressLine2: string
    contactPerson: string
  }

  export type SellerUncheckedCreateWithoutPurchaseInput = {
    id?: string
    name: string
    addressLine1: string
    addressLine2: string
    contactPerson: string
  }

  export type SellerCreateOrConnectWithoutPurchaseInput = {
    where: SellerWhereUniqueInput
    create: XOR<SellerCreateWithoutPurchaseInput, SellerUncheckedCreateWithoutPurchaseInput>
  }

  export type FileCreateWithoutPurchaseInput = {
    id?: string
    fileName: string
    mimeType: string
    createdAt?: Date | string
    content: Buffer
  }

  export type FileUncheckedCreateWithoutPurchaseInput = {
    id?: string
    fileName: string
    mimeType: string
    createdAt?: Date | string
    content: Buffer
  }

  export type FileCreateOrConnectWithoutPurchaseInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutPurchaseInput, FileUncheckedCreateWithoutPurchaseInput>
  }

  export type FileCreateManyPurchaseInputEnvelope = {
    data: Enumerable<FileCreateManyPurchaseInput>
    skipDuplicates?: boolean
  }

  export type CertificateUpsertWithoutPurchaseInput = {
    update: XOR<CertificateUpdateWithoutPurchaseInput, CertificateUncheckedUpdateWithoutPurchaseInput>
    create: XOR<CertificateCreateWithoutPurchaseInput, CertificateUncheckedCreateWithoutPurchaseInput>
  }

  export type CertificateUpdateWithoutPurchaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    generatorName?: StringFieldUpdateOperationsInput | string
    generatorId?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    energySource?: StringFieldUpdateOperationsInput | string
    generationStart?: DateTimeFieldUpdateOperationsInput | Date | string
    generationEnd?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateUncheckedUpdateWithoutPurchaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    generatorName?: StringFieldUpdateOperationsInput | string
    generatorId?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    energySource?: StringFieldUpdateOperationsInput | string
    generationStart?: DateTimeFieldUpdateOperationsInput | Date | string
    generationEnd?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyerUpsertWithoutPurchaseInput = {
    update: XOR<BuyerUpdateWithoutPurchaseInput, BuyerUncheckedUpdateWithoutPurchaseInput>
    create: XOR<BuyerCreateWithoutPurchaseInput, BuyerUncheckedCreateWithoutPurchaseInput>
  }

  export type BuyerUpdateWithoutPurchaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    filecoinNodes?: FilecoinNodeUpdateManyWithoutBuyerInput
  }

  export type BuyerUncheckedUpdateWithoutPurchaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    filecoinNodes?: FilecoinNodeUncheckedUpdateManyWithoutBuyerInput
  }

  export type SellerUpsertWithoutPurchaseInput = {
    update: XOR<SellerUpdateWithoutPurchaseInput, SellerUncheckedUpdateWithoutPurchaseInput>
    create: XOR<SellerCreateWithoutPurchaseInput, SellerUncheckedCreateWithoutPurchaseInput>
  }

  export type SellerUpdateWithoutPurchaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
  }

  export type SellerUncheckedUpdateWithoutPurchaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    addressLine1?: StringFieldUpdateOperationsInput | string
    addressLine2?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
  }

  export type FileUpsertWithWhereUniqueWithoutPurchaseInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutPurchaseInput, FileUncheckedUpdateWithoutPurchaseInput>
    create: XOR<FileCreateWithoutPurchaseInput, FileUncheckedCreateWithoutPurchaseInput>
  }

  export type FileUpdateWithWhereUniqueWithoutPurchaseInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutPurchaseInput, FileUncheckedUpdateWithoutPurchaseInput>
  }

  export type FileUpdateManyWithWhereWithoutPurchaseInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutFilesInput>
  }

  export type FileScalarWhereInput = {
    AND?: Enumerable<FileScalarWhereInput>
    OR?: Enumerable<FileScalarWhereInput>
    NOT?: Enumerable<FileScalarWhereInput>
    id?: StringFilter | string
    fileName?: StringFilter | string
    mimeType?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    content?: BytesFilter | Buffer
    purchaseId?: StringNullableFilter | string | null
  }

  export type PurchaseCreateManyBuyerInput = {
    id?: string
    certificateId: string
    sellerId?: string | null
    recsSold: number
    recsTransactions: InputJsonValue
  }

  export type FilecoinNodeCreateManyBuyerInput = {
    id: string
  }

  export type PurchaseUpdateWithoutBuyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    recsSold?: IntFieldUpdateOperationsInput | number
    recsTransactions?: InputJsonValue
    certificate?: CertificateUpdateOneRequiredWithoutPurchaseInput
    seller?: SellerUpdateOneWithoutPurchaseInput
    files?: FileUpdateManyWithoutPurchaseInput
  }

  export type PurchaseUncheckedUpdateWithoutBuyerInput = {
    id?: StringFieldUpdateOperationsInput | string
    certificateId?: StringFieldUpdateOperationsInput | string
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    recsSold?: IntFieldUpdateOperationsInput | number
    recsTransactions?: InputJsonValue
    files?: FileUncheckedUpdateManyWithoutPurchaseInput
  }

  export type PurchaseUncheckedUpdateManyWithoutPurchaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    certificateId?: StringFieldUpdateOperationsInput | string
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    recsSold?: IntFieldUpdateOperationsInput | number
    recsTransactions?: InputJsonValue
  }

  export type FilecoinNodeUpdateWithoutBuyerInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type FilecoinNodeUncheckedUpdateWithoutBuyerInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type FilecoinNodeUncheckedUpdateManyWithoutFilecoinNodesInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type PurchaseCreateManySellerInput = {
    id?: string
    certificateId: string
    buyerId?: string | null
    recsSold: number
    recsTransactions: InputJsonValue
  }

  export type PurchaseUpdateWithoutSellerInput = {
    id?: StringFieldUpdateOperationsInput | string
    recsSold?: IntFieldUpdateOperationsInput | number
    recsTransactions?: InputJsonValue
    certificate?: CertificateUpdateOneRequiredWithoutPurchaseInput
    buyer?: BuyerUpdateOneWithoutPurchaseInput
    files?: FileUpdateManyWithoutPurchaseInput
  }

  export type PurchaseUncheckedUpdateWithoutSellerInput = {
    id?: StringFieldUpdateOperationsInput | string
    certificateId?: StringFieldUpdateOperationsInput | string
    buyerId?: NullableStringFieldUpdateOperationsInput | string | null
    recsSold?: IntFieldUpdateOperationsInput | number
    recsTransactions?: InputJsonValue
    files?: FileUncheckedUpdateManyWithoutPurchaseInput
  }

  export type PurchaseCreateManyCertificateInput = {
    id?: string
    buyerId?: string | null
    sellerId?: string | null
    recsSold: number
    recsTransactions: InputJsonValue
  }

  export type PurchaseUpdateWithoutCertificateInput = {
    id?: StringFieldUpdateOperationsInput | string
    recsSold?: IntFieldUpdateOperationsInput | number
    recsTransactions?: InputJsonValue
    buyer?: BuyerUpdateOneWithoutPurchaseInput
    seller?: SellerUpdateOneWithoutPurchaseInput
    files?: FileUpdateManyWithoutPurchaseInput
  }

  export type PurchaseUncheckedUpdateWithoutCertificateInput = {
    id?: StringFieldUpdateOperationsInput | string
    buyerId?: NullableStringFieldUpdateOperationsInput | string | null
    sellerId?: NullableStringFieldUpdateOperationsInput | string | null
    recsSold?: IntFieldUpdateOperationsInput | number
    recsTransactions?: InputJsonValue
    files?: FileUncheckedUpdateManyWithoutPurchaseInput
  }

  export type FileCreateManyPurchaseInput = {
    id?: string
    fileName: string
    mimeType: string
    createdAt?: Date | string
    content: Buffer
  }

  export type FileUpdateWithoutPurchaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: BytesFieldUpdateOperationsInput | Buffer
  }

  export type FileUncheckedUpdateWithoutPurchaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: BytesFieldUpdateOperationsInput | Buffer
  }

  export type FileUncheckedUpdateManyWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: BytesFieldUpdateOperationsInput | Buffer
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}