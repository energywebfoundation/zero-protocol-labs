/*
 * Generated by orval v5.4.12 üç∫
 * Do not edit manually.
 * Energy Web Zero API
 * OpenAPI spec version: 0.3
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions
} from 'react-query'
import type {
  CreateCertificateDto,
  CertificateDto,
  UpdateCertificateDto
} from './energyWebZeroAPI.schemas'
import certificatesControllerCreateMutator from '../response-type'
import certificatesControllerFindAllMutator from '../response-type'
import certificatesControllerFindOneMutator from '../response-type'
import certificatesControllerUpdateMutator from '../response-type'
import certificatesControllerRemoveMutator from '../response-type'


type AsyncReturnType<
T extends (...args: any) => Promise<any>,
U = unknown
> = T extends (...args: any) => Promise<infer R> ? (U extends R ? U : R) : any;


type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const certificatesControllerCreate = <TData = unknown>(
    createCertificateDto: CreateCertificateDto,
 options?: SecondParameter<typeof certificatesControllerCreateMutator>) => {
      return certificatesControllerCreateMutator<TData>(
      {url: `/api/partners/filecoin/certificates`, method: 'post',
      data: createCertificateDto
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useCertificatesControllerCreate = <TData = AsyncReturnType<typeof certificatesControllerCreate,unknown>,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: CreateCertificateDto}, TContext>, request?: SecondParameter<typeof certificatesControllerCreateMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<TData, TError, {data: CreateCertificateDto}, TContext>((props) => {
        const {data} = props || {};

        return  certificatesControllerCreate<TData>(data,requestOptions)
      }, mutationOptions)
    }
    export const certificatesControllerFindAll = <TData = CertificateDto[]>(
    
 options?: SecondParameter<typeof certificatesControllerFindAllMutator>) => {
      return certificatesControllerFindAllMutator<TData>(
      {url: `/api/partners/filecoin/certificates`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getCertificatesControllerFindAllQueryKey = () => [`/api/partners/filecoin/certificates`]

    
export const useCertificatesControllerFindAll = <TQueryFnData = AsyncReturnType<typeof certificatesControllerFindAll, CertificateDto[]>, TError = unknown, TData = TQueryFnData>(
  options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, request?: SecondParameter<typeof certificatesControllerFindAllMutator>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getCertificatesControllerFindAllQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => certificatesControllerFindAll<TQueryFnData>(requestOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const certificatesControllerFindOne = <TData = CertificateDto>(
    id: string,
 options?: SecondParameter<typeof certificatesControllerFindOneMutator>) => {
      return certificatesControllerFindOneMutator<TData>(
      {url: `/api/partners/filecoin/certificates/${id}`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getCertificatesControllerFindOneQueryKey = (id: string,) => [`/api/partners/filecoin/certificates/${id}`]

    
export const useCertificatesControllerFindOne = <TQueryFnData = AsyncReturnType<typeof certificatesControllerFindOne, CertificateDto>, TError = unknown, TData = TQueryFnData>(
 id: string, options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, request?: SecondParameter<typeof certificatesControllerFindOneMutator>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getCertificatesControllerFindOneQueryKey(id);

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => certificatesControllerFindOne<TQueryFnData>(id, requestOptions), {enabled: !!(id), ...queryOptions} )

  return {
    queryKey,
    ...query
  }
}

export const certificatesControllerUpdate = <TData = unknown>(
    id: string,
    updateCertificateDto: UpdateCertificateDto,
 options?: SecondParameter<typeof certificatesControllerUpdateMutator>) => {
      return certificatesControllerUpdateMutator<TData>(
      {url: `/api/partners/filecoin/certificates/${id}`, method: 'patch',
      data: updateCertificateDto
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useCertificatesControllerUpdate = <TData = AsyncReturnType<typeof certificatesControllerUpdate,unknown>,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: string;data: UpdateCertificateDto}, TContext>, request?: SecondParameter<typeof certificatesControllerUpdateMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<TData, TError, {id: string;data: UpdateCertificateDto}, TContext>((props) => {
        const {id,data} = props || {};

        return  certificatesControllerUpdate<TData>(id,data,requestOptions)
      }, mutationOptions)
    }
    export const certificatesControllerRemove = <TData = unknown>(
    id: string,
 options?: SecondParameter<typeof certificatesControllerRemoveMutator>) => {
      return certificatesControllerRemoveMutator<TData>(
      {url: `/api/partners/filecoin/certificates/${id}`, method: 'delete'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useCertificatesControllerRemove = <TData = AsyncReturnType<typeof certificatesControllerRemove,unknown>,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: string}, TContext>, request?: SecondParameter<typeof certificatesControllerRemoveMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<TData, TError, {id: string}, TContext>((props) => {
        const {id} = props || {};

        return  certificatesControllerRemove<TData>(id,requestOptions)
      }, mutationOptions)
    }
    