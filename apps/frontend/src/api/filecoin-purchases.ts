/*
 * Generated by orval v5.4.12 üç∫
 * Do not edit manually.
 * Energy Web Zero API
 * OpenAPI spec version: 0.3
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions
} from 'react-query'
import type {
  CreatePurchaseDto,
  PurchasesControllerFindAll200Item,
  PurchaseDto,
  UpdatePurchaseDto
} from './energyWebZeroAPI.schemas'
import purchasesControllerCreateMutator from '../response-type'
import purchasesControllerFindAllMutator from '../response-type'
import purchasesControllerFindOneMutator from '../response-type'
import purchasesControllerUpdateMutator from '../response-type'
import purchasesControllerRemoveMutator from '../response-type'


type AsyncReturnType<
T extends (...args: any) => Promise<any>,
U = unknown
> = T extends (...args: any) => Promise<infer R> ? (U extends R ? U : R) : any;


type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const purchasesControllerCreate = <TData = unknown>(
    createPurchaseDto: CreatePurchaseDto,
 options?: SecondParameter<typeof purchasesControllerCreateMutator>) => {
      return purchasesControllerCreateMutator<TData>(
      {url: `/api/partners/filecoin/purchases`, method: 'post',
      data: createPurchaseDto
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const usePurchasesControllerCreate = <TData = AsyncReturnType<typeof purchasesControllerCreate,unknown>,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: CreatePurchaseDto}, TContext>, request?: SecondParameter<typeof purchasesControllerCreateMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<TData, TError, {data: CreatePurchaseDto}, TContext>((props) => {
        const {data} = props || {};

        return  purchasesControllerCreate<TData>(data,requestOptions)
      }, mutationOptions)
    }
    export const purchasesControllerFindAll = <TData = PurchasesControllerFindAll200Item[]>(
    
 options?: SecondParameter<typeof purchasesControllerFindAllMutator>) => {
      return purchasesControllerFindAllMutator<TData>(
      {url: `/api/partners/filecoin/purchases`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getPurchasesControllerFindAllQueryKey = () => [`/api/partners/filecoin/purchases`]

    
export const usePurchasesControllerFindAll = <TQueryFnData = AsyncReturnType<typeof purchasesControllerFindAll, PurchasesControllerFindAll200Item[]>, TError = unknown, TData = TQueryFnData>(
  options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, request?: SecondParameter<typeof purchasesControllerFindAllMutator>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getPurchasesControllerFindAllQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => purchasesControllerFindAll<TQueryFnData>(requestOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const purchasesControllerFindOne = <TData = PurchaseDto>(
    id: string,
 options?: SecondParameter<typeof purchasesControllerFindOneMutator>) => {
      return purchasesControllerFindOneMutator<TData>(
      {url: `/api/partners/filecoin/purchases/${id}`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getPurchasesControllerFindOneQueryKey = (id: string,) => [`/api/partners/filecoin/purchases/${id}`]

    
export const usePurchasesControllerFindOne = <TQueryFnData = AsyncReturnType<typeof purchasesControllerFindOne, PurchaseDto>, TError = unknown, TData = TQueryFnData>(
 id: string, options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, request?: SecondParameter<typeof purchasesControllerFindOneMutator>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getPurchasesControllerFindOneQueryKey(id);

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => purchasesControllerFindOne<TQueryFnData>(id, requestOptions), {enabled: !!(id), ...queryOptions} )

  return {
    queryKey,
    ...query
  }
}

export const purchasesControllerUpdate = <TData = unknown>(
    id: string,
    updatePurchaseDto: UpdatePurchaseDto,
 options?: SecondParameter<typeof purchasesControllerUpdateMutator>) => {
      return purchasesControllerUpdateMutator<TData>(
      {url: `/api/partners/filecoin/purchases/${id}`, method: 'patch',
      data: updatePurchaseDto
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const usePurchasesControllerUpdate = <TData = AsyncReturnType<typeof purchasesControllerUpdate,unknown>,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: string;data: UpdatePurchaseDto}, TContext>, request?: SecondParameter<typeof purchasesControllerUpdateMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<TData, TError, {id: string;data: UpdatePurchaseDto}, TContext>((props) => {
        const {id,data} = props || {};

        return  purchasesControllerUpdate<TData>(id,data,requestOptions)
      }, mutationOptions)
    }
    export const purchasesControllerRemove = <TData = unknown>(
    id: string,
 options?: SecondParameter<typeof purchasesControllerRemoveMutator>) => {
      return purchasesControllerRemoveMutator<TData>(
      {url: `/api/partners/filecoin/purchases/${id}`, method: 'delete'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const usePurchasesControllerRemove = <TData = AsyncReturnType<typeof purchasesControllerRemove,unknown>,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: string}, TContext>, request?: SecondParameter<typeof purchasesControllerRemoveMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<TData, TError, {id: string}, TContext>((props) => {
        const {id} = props || {};

        return  purchasesControllerRemove<TData>(id,requestOptions)
      }, mutationOptions)
    }
    