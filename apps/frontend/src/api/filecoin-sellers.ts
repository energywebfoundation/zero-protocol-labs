/*
 * Generated by orval v5.4.12 üç∫
 * Do not edit manually.
 * Energy Web Zero API
 * OpenAPI spec version: 0.3
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions
} from 'react-query'
import type {
  CreateSellerDto,
  SellerDto,
  UpdateSellerDto
} from './energyWebZeroAPI.schemas'
import sellersControllerCreateMutator from '../response-type'
import sellersControllerFindAllMutator from '../response-type'
import sellersControllerFindOneMutator from '../response-type'
import sellersControllerUpdateMutator from '../response-type'
import sellersControllerRemoveMutator from '../response-type'


type AsyncReturnType<
T extends (...args: any) => Promise<any>,
U = unknown
> = T extends (...args: any) => Promise<infer R> ? (U extends R ? U : R) : any;


type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const sellersControllerCreate = <TData = unknown>(
    createSellerDto: CreateSellerDto,
 options?: SecondParameter<typeof sellersControllerCreateMutator>) => {
      return sellersControllerCreateMutator<TData>(
      {url: `/api/partners/filecoin/sellers`, method: 'post',
      data: createSellerDto
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useSellersControllerCreate = <TData = AsyncReturnType<typeof sellersControllerCreate,unknown>,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: CreateSellerDto}, TContext>, request?: SecondParameter<typeof sellersControllerCreateMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<TData, TError, {data: CreateSellerDto}, TContext>((props) => {
        const {data} = props || {};

        return  sellersControllerCreate<TData>(data,requestOptions)
      }, mutationOptions)
    }
    export const sellersControllerFindAll = <TData = SellerDto[]>(
    
 options?: SecondParameter<typeof sellersControllerFindAllMutator>) => {
      return sellersControllerFindAllMutator<TData>(
      {url: `/api/partners/filecoin/sellers`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getSellersControllerFindAllQueryKey = () => [`/api/partners/filecoin/sellers`]

    
export const useSellersControllerFindAll = <TQueryFnData = AsyncReturnType<typeof sellersControllerFindAll, SellerDto[]>, TError = unknown, TData = TQueryFnData>(
  options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, request?: SecondParameter<typeof sellersControllerFindAllMutator>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getSellersControllerFindAllQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => sellersControllerFindAll<TQueryFnData>(requestOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const sellersControllerFindOne = <TData = SellerDto>(
    id: string,
 options?: SecondParameter<typeof sellersControllerFindOneMutator>) => {
      return sellersControllerFindOneMutator<TData>(
      {url: `/api/partners/filecoin/sellers/${id}`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getSellersControllerFindOneQueryKey = (id: string,) => [`/api/partners/filecoin/sellers/${id}`]

    
export const useSellersControllerFindOne = <TQueryFnData = AsyncReturnType<typeof sellersControllerFindOne, SellerDto>, TError = unknown, TData = TQueryFnData>(
 id: string, options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, request?: SecondParameter<typeof sellersControllerFindOneMutator>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getSellersControllerFindOneQueryKey(id);

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => sellersControllerFindOne<TQueryFnData>(id, requestOptions), {enabled: !!(id), ...queryOptions} )

  return {
    queryKey,
    ...query
  }
}

export const sellersControllerUpdate = <TData = unknown>(
    id: string,
    updateSellerDto: UpdateSellerDto,
 options?: SecondParameter<typeof sellersControllerUpdateMutator>) => {
      return sellersControllerUpdateMutator<TData>(
      {url: `/api/partners/filecoin/sellers/${id}`, method: 'patch',
      data: updateSellerDto
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useSellersControllerUpdate = <TData = AsyncReturnType<typeof sellersControllerUpdate,unknown>,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: string;data: UpdateSellerDto}, TContext>, request?: SecondParameter<typeof sellersControllerUpdateMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<TData, TError, {id: string;data: UpdateSellerDto}, TContext>((props) => {
        const {id,data} = props || {};

        return  sellersControllerUpdate<TData>(id,data,requestOptions)
      }, mutationOptions)
    }
    export const sellersControllerRemove = <TData = SellerDto>(
    id: string,
 options?: SecondParameter<typeof sellersControllerRemoveMutator>) => {
      return sellersControllerRemoveMutator<TData>(
      {url: `/api/partners/filecoin/sellers/${id}`, method: 'delete'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useSellersControllerRemove = <TData = AsyncReturnType<typeof sellersControllerRemove,SellerDto>,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: string}, TContext>, request?: SecondParameter<typeof sellersControllerRemoveMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<TData, TError, {id: string}, TContext>((props) => {
        const {id} = props || {};

        return  sellersControllerRemove<TData>(id,requestOptions)
      }, mutationOptions)
    }
    