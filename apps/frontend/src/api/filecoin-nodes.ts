/*
 * Generated by orval v5.4.12 üç∫
 * Do not edit manually.
 * Energy Web Zero API
 * OpenAPI spec version: 0.3
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions
} from 'react-query'
import type {
  FilecoinNodeDto,
  CreateFilecoinNodeDto,
  UpdateFilecoinNodeDto
} from './energyWebZeroAPI.schemas'
import filecoinNodesControllerCreateMutator from '../response-type'
import filecoinNodesControllerFindAllMutator from '../response-type'
import filecoinNodesControllerFindOneMutator from '../response-type'
import filecoinNodesControllerUpdateMutator from '../response-type'
import filecoinNodesControllerRemoveMutator from '../response-type'


type AsyncReturnType<
T extends (...args: any) => Promise<any>,
U = unknown
> = T extends (...args: any) => Promise<infer R> ? (U extends R ? U : R) : any;


type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const filecoinNodesControllerCreate = <TData = FilecoinNodeDto>(
    createFilecoinNodeDto: CreateFilecoinNodeDto,
 options?: SecondParameter<typeof filecoinNodesControllerCreateMutator>) => {
      return filecoinNodesControllerCreateMutator<TData>(
      {url: `/api/partners/filecoin/nodes`, method: 'post',
      data: createFilecoinNodeDto
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useFilecoinNodesControllerCreate = <TData = AsyncReturnType<typeof filecoinNodesControllerCreate,FilecoinNodeDto>,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: CreateFilecoinNodeDto}, TContext>, request?: SecondParameter<typeof filecoinNodesControllerCreateMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<TData, TError, {data: CreateFilecoinNodeDto}, TContext>((props) => {
        const {data} = props || {};

        return  filecoinNodesControllerCreate<TData>(data,requestOptions)
      }, mutationOptions)
    }
    export const filecoinNodesControllerFindAll = <TData = FilecoinNodeDto[]>(
    
 options?: SecondParameter<typeof filecoinNodesControllerFindAllMutator>) => {
      return filecoinNodesControllerFindAllMutator<TData>(
      {url: `/api/partners/filecoin/nodes`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getFilecoinNodesControllerFindAllQueryKey = () => [`/api/partners/filecoin/nodes`]

    
export const useFilecoinNodesControllerFindAll = <TQueryFnData = AsyncReturnType<typeof filecoinNodesControllerFindAll, FilecoinNodeDto[]>, TError = unknown, TData = TQueryFnData>(
  options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, request?: SecondParameter<typeof filecoinNodesControllerFindAllMutator>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getFilecoinNodesControllerFindAllQueryKey();

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => filecoinNodesControllerFindAll<TQueryFnData>(requestOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const filecoinNodesControllerFindOne = <TData = FilecoinNodeDto>(
    id: string,
 options?: SecondParameter<typeof filecoinNodesControllerFindOneMutator>) => {
      return filecoinNodesControllerFindOneMutator<TData>(
      {url: `/api/partners/filecoin/nodes/${id}`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  

export const getFilecoinNodesControllerFindOneQueryKey = (id: string,) => [`/api/partners/filecoin/nodes/${id}`]

    
export const useFilecoinNodesControllerFindOne = <TQueryFnData = AsyncReturnType<typeof filecoinNodesControllerFindOne, FilecoinNodeDto>, TError = unknown, TData = TQueryFnData>(
 id: string, options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, request?: SecondParameter<typeof filecoinNodesControllerFindOneMutator>}

  ) => {

  const {query: queryOptions, request: requestOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getFilecoinNodesControllerFindOneQueryKey(id);

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => filecoinNodesControllerFindOne<TQueryFnData>(id, requestOptions), {enabled: !!(id), ...queryOptions} )

  return {
    queryKey,
    ...query
  }
}

export const filecoinNodesControllerUpdate = <TData = FilecoinNodeDto>(
    id: string,
    updateFilecoinNodeDto: UpdateFilecoinNodeDto,
 options?: SecondParameter<typeof filecoinNodesControllerUpdateMutator>) => {
      return filecoinNodesControllerUpdateMutator<TData>(
      {url: `/api/partners/filecoin/nodes/${id}`, method: 'patch',
      data: updateFilecoinNodeDto
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useFilecoinNodesControllerUpdate = <TData = AsyncReturnType<typeof filecoinNodesControllerUpdate,FilecoinNodeDto>,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: string;data: UpdateFilecoinNodeDto}, TContext>, request?: SecondParameter<typeof filecoinNodesControllerUpdateMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<TData, TError, {id: string;data: UpdateFilecoinNodeDto}, TContext>((props) => {
        const {id,data} = props || {};

        return  filecoinNodesControllerUpdate<TData>(id,data,requestOptions)
      }, mutationOptions)
    }
    export const filecoinNodesControllerRemove = <TData = FilecoinNodeDto>(
    id: string,
 options?: SecondParameter<typeof filecoinNodesControllerRemoveMutator>) => {
      return filecoinNodesControllerRemoveMutator<TData>(
      {url: `/api/partners/filecoin/nodes/${id}`, method: 'delete'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  


    export const useFilecoinNodesControllerRemove = <TData = AsyncReturnType<typeof filecoinNodesControllerRemove,FilecoinNodeDto>,
    TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{id: string}, TContext>, request?: SecondParameter<typeof filecoinNodesControllerRemoveMutator>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options || {}

      return useMutation<TData, TError, {id: string}, TContext>((props) => {
        const {id} = props || {};

        return  filecoinNodesControllerRemove<TData>(id,requestOptions)
      }, mutationOptions)
    }
    